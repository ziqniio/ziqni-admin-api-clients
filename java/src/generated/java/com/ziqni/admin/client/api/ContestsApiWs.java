/*
 * Ziqni Admin Api
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 3.0.1
 * Contact: support@ziqni.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.ziqni.admin.client.api;

import com.ziqni.admin.client.StreamingClient;
import com.ziqni.admin.client.ApiClient;
import com.ziqni.admin.client.ApiException;
import com.ziqni.admin.client.ApiResponse;
import com.ziqni.admin.client.Pair;
import com.ziqni.admin.client.model.CloneContestResponse;
import com.ziqni.admin.client.model.ContestLeaderboardResponse;
import com.ziqni.admin.client.model.ContestResponse;
import com.ziqni.admin.client.model.CreateContestForCompetitionRequest;
import com.ziqni.admin.client.model.EntrantResponse;
import com.ziqni.admin.client.model.ModelApiResponse;
import com.ziqni.admin.client.model.QueryRequest;
import com.ziqni.admin.client.model.UpdateContestRequest;
import com.ziqni.admin.client.model.UpdateContestStateRequest;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.time.Duration;
import java.util.*;

import java.util.concurrent.CompletableFuture;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
    public class ContestsApiWs extends ContestsApi {
    private final ApiClient apiClient;
    private final ObjectMapper memberVarObjectMapper;
    private final Duration memberVarReadTimeout;
    private final StreamingClient streamingClient;

    public ContestsApiWs(ApiClient apiClient, StreamingClient streamingClient, Duration readTimeout) {
        this.apiClient = apiClient;
        this.memberVarObjectMapper = apiClient.getObjectMapper();
        this.streamingClient = streamingClient;
        this.memberVarReadTimeout = null;
    }

        /**
        * 
        * Create a new Contests in the Ziqni database
            * @param body Create a Contests in the Ziqni database (required)
            * @return CompletableFuture&lt;ModelApiResponse&gt;
        * @throws ApiException if fails to make API call
        */
        public CompletableFuture<ModelApiResponse> createContests(CreateContestForCompetitionRequest body) {
        var request = new HashMap<String, Object>();
        
                

        
                
        request.put("body",body);

        CompletableFuture<ModelApiResponse> result = this.streamingClient.sendWithApiCallback("/aapi/createContests", request);
        return result;
        }
        /**
        * NOT AVAILABLE IN CURRENT RELEASE
        * Returns all children Contests for the Contest id provided
            * @param id Unique identifier of the resource (required)
            * @param limit Limit the returned total records found (optional)
            * @param skip Skip the returned records found and return the next batch of records (optional)
            * @return CompletableFuture&lt;ContestResponse&gt;
        * @throws ApiException if fails to make API call
        */
        public CompletableFuture<ContestResponse> getChildrenOfContest(String id, Integer limit, Integer skip) {
        var request = new HashMap<String, Object>();
        var queryParam = new HashMap<String, Object>();
        queryParam.put("limit", limit);
queryParam.put("skip", skip);
        request.put("query",queryParam);

        var pathParam = new HashMap<String, Object>();
        pathParam.put("id", id);
        request.put("path",pathParam);
        

        CompletableFuture<ContestResponse> result = this.streamingClient.sendWithApiCallback("/aapi/getChildrenOfContest", request);
        return result;
        }
        /**
        * 
        * Returns a list of Contests. This assumes that contests have first been uploaded via a POST request or web console
            * @param id The unique identifiers of the resources (optional
            * @param limit Limit the returned total records found (optional)
            * @param skip Skip the returned records found and return the next batch of records (optional)
            * @return CompletableFuture&lt;ContestResponse&gt;
        * @throws ApiException if fails to make API call
        */
        public CompletableFuture<ContestResponse> getContests(List<String> id, Integer limit, Integer skip) {
        var request = new HashMap<String, Object>();
        var queryParam = new HashMap<String, Object>();
        queryParam.put("id", id);
queryParam.put("limit", limit);
queryParam.put("skip", skip);
        request.put("query",queryParam);

        
                
        

        CompletableFuture<ContestResponse> result = this.streamingClient.sendWithApiCallback("/aapi/getContests", request);
        return result;
        }
        /**
        * 
        * Retrieve Contests from Ziqni database by unique Contests ID&#39;s or any other POST body parameters using the POST method
            * @param body Retrieve Contests from Ziqni database by unique Contest ID&#39;s or any other Post body parameters using the POST method (optional)
            * @return CompletableFuture&lt;ContestResponse&gt;
        * @throws ApiException if fails to make API call
        */
        public CompletableFuture<ContestResponse> getContestsByQuery(QueryRequest body) {
        var request = new HashMap<String, Object>();
        
                

        
                
        request.put("body",body);

        CompletableFuture<ContestResponse> result = this.streamingClient.sendWithApiCallback("/aapi/getContestsByQuery", request);
        return result;
        }
        /**
        * NOT AVAILABLE IN CURRENT RELEASE
        * Returns a leaderborad for the Contests id provided
            * @param id Unique identifier of the resource (required)
            * @param limit Limit the returned total records found (optional)
            * @param skip Skip the returned records found and return the next batch of records (optional)
            * @return CompletableFuture&lt;ContestLeaderboardResponse&gt;
        * @throws ApiException if fails to make API call
        */
        public CompletableFuture<ContestLeaderboardResponse> getContestsLeaderboardById(String id, Integer limit, Integer skip) {
        var request = new HashMap<String, Object>();
        var queryParam = new HashMap<String, Object>();
        queryParam.put("limit", limit);
queryParam.put("skip", skip);
        request.put("query",queryParam);

        var pathParam = new HashMap<String, Object>();
        pathParam.put("id", id);
        request.put("path",pathParam);
        

        CompletableFuture<ContestLeaderboardResponse> result = this.streamingClient.sendWithApiCallback("/aapi/getContestsLeaderboardById", request);
        return result;
        }
        /**
        * NOT AVAILABLE IN CURRENT RELEASE
        * Clones a Contest for the identifier provided
            * @param id Unique identifier of the resource (required)
            * @return CompletableFuture&lt;CloneContestResponse&gt;
        * @throws ApiException if fails to make API call
        */
        public CompletableFuture<CloneContestResponse> getContestsToClone(String id) {
        var request = new HashMap<String, Object>();
        
                

        var pathParam = new HashMap<String, Object>();
        pathParam.put("id", id);
        request.put("path",pathParam);
        

        CompletableFuture<CloneContestResponse> result = this.streamingClient.sendWithApiCallback("/aapi/getContestsToClone", request);
        return result;
        }
        /**
        * NOT AVAILABLE IN CURRENT RELEASE
        * Returns all Entries for the Contest id provided
            * @param id Unique identifier of the resource (required)
            * @param limit Limit the returned total records found (optional)
            * @param skip Skip the returned records found and return the next batch of records (optional)
            * @return CompletableFuture&lt;EntrantResponse&gt;
        * @throws ApiException if fails to make API call
        */
        public CompletableFuture<EntrantResponse> getListOfEntrantsForContest(String id, Integer limit, Integer skip) {
        var request = new HashMap<String, Object>();
        var queryParam = new HashMap<String, Object>();
        queryParam.put("limit", limit);
queryParam.put("skip", skip);
        request.put("query",queryParam);

        var pathParam = new HashMap<String, Object>();
        pathParam.put("id", id);
        request.put("path",pathParam);
        

        CompletableFuture<EntrantResponse> result = this.streamingClient.sendWithApiCallback("/aapi/getListOfEntrantsForContest", request);
        return result;
        }
        /**
        * NOT AVAILABLE IN CURRENT RELEASE
        * Returns all parent Contests for the Contest id provided
            * @param id Unique identifier of the resource (required)
            * @param limit Limit the returned total records found (optional)
            * @param skip Skip the returned records found and return the next batch of records (optional)
            * @return CompletableFuture&lt;ContestResponse&gt;
        * @throws ApiException if fails to make API call
        */
        public CompletableFuture<ContestResponse> getParentsOfContest(String id, Integer limit, Integer skip) {
        var request = new HashMap<String, Object>();
        var queryParam = new HashMap<String, Object>();
        queryParam.put("limit", limit);
queryParam.put("skip", skip);
        request.put("query",queryParam);

        var pathParam = new HashMap<String, Object>();
        pathParam.put("id", id);
        request.put("path",pathParam);
        

        CompletableFuture<ContestResponse> result = this.streamingClient.sendWithApiCallback("/aapi/getParentsOfContest", request);
        return result;
        }
        /**
        * 
        * Update an existing Contest in the Ziqni database
            * @param body Update a Contest in the Ziqni database. * A Contests Id must exist in the Ziqni database for update (required)
            * @return CompletableFuture&lt;ModelApiResponse&gt;
        * @throws ApiException if fails to make API call
        */
        public CompletableFuture<ModelApiResponse> updateContest(UpdateContestRequest body) {
        var request = new HashMap<String, Object>();
        
                

        
                
        request.put("body",body);

        CompletableFuture<ModelApiResponse> result = this.streamingClient.sendWithApiCallback("/aapi/updateContest", request);
        return result;
        }
        /**
        * NOT AVAILABLE IN CURRENT RELEASE
        * Manages the Contests state
            * @param body Updates the state of the Contest (optional
            * @return CompletableFuture&lt;ModelApiResponse&gt;
        * @throws ApiException if fails to make API call
        */
        public CompletableFuture<ModelApiResponse> updateContestsState(List<UpdateContestStateRequest> body) {
        var request = new HashMap<String, Object>();
        
                

        
                
        request.put("body",body);

        CompletableFuture<ModelApiResponse> result = this.streamingClient.sendWithApiCallback("/aapi/updateContestsState", request);
        return result;
        }
        }
