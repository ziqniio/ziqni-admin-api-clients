/*
 * ZIQNI Admin API
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 3.0.1
 * Contact: support@ziqni.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.ziqni.admin.client.api;

import com.ziqni.admin.client.StreamingClient;
import com.ziqni.admin.client.ApiClient;
import com.ziqni.admin.client.ApiException;
import com.ziqni.admin.client.ApiResponse;
import com.ziqni.admin.client.Pair;
import com.ziqni.admin.client.model.CreateEventRequest;
import com.ziqni.admin.client.model.EventResponse;
import com.ziqni.admin.client.model.ModelApiResponse;
import com.ziqni.admin.client.model.QueryRequest;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.time.Duration;
import java.util.*;

import java.util.concurrent.CompletableFuture;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
    public class EventsApiWs extends EventsApi {
    private final ApiClient apiClient;
    private final ObjectMapper memberVarObjectMapper;
    private final Duration memberVarReadTimeout;
    private final StreamingClient streamingClient;

    public EventsApiWs(ApiClient apiClient, StreamingClient streamingClient, Duration readTimeout) {
        this.apiClient = apiClient;
        this.memberVarObjectMapper = apiClient.getObjectMapper();
        this.streamingClient = streamingClient;
        this.memberVarReadTimeout = null;
    }

        /**
        * 
        * Create an Event
            * @param body Create an Event (optional
            * @return CompletableFuture&lt;ModelApiResponse&gt;
        * @throws ApiException if fails to make API call
        */
        public CompletableFuture<ModelApiResponse> createEvents(List<CreateEventRequest> body) {
        var request = new HashMap<String, Object>();
        
                

        
                
        request.put("body",body);

        CompletableFuture<ModelApiResponse> result = this.streamingClient.sendWithApiCallback("/aapi/createEvents", request);
        return result;
        }
        /**
        * 
        * Retrieve an Event or a list of Events from Ziqni by unique Event ID&#39;s or any other POST body parameters using the POST method
            * @param id The unique identifiers of the resources (optional
            * @param limit Limit the returned total records found (optional)
            * @param skip Skip the returned records found and return the next batch of records (optional)
            * @return CompletableFuture&lt;EventResponse&gt;
        * @throws ApiException if fails to make API call
        */
        public CompletableFuture<EventResponse> getEvents(List<String> id, Integer limit, Integer skip) {
        var request = new HashMap<String, Object>();
        var queryParam = new HashMap<String, Object>();
        queryParam.put("id", id);
queryParam.put("limit", limit);
queryParam.put("skip", skip);
        request.put("query",queryParam);

        
                
        

        CompletableFuture<EventResponse> result = this.streamingClient.sendWithApiCallback("/aapi/getEvents", request);
        return result;
        }
        /**
        * 
        * Retrieve an Event or a list of Events from Ziqni by unique Event ID&#39;s or any other POST body parameters using the POST method
            * @param body Retrieve an Event or a list of Events from Ziqni by unique Event ID&#39;s or any other POST body parameters using the POST method (optional)
            * @return CompletableFuture&lt;EventResponse&gt;
        * @throws ApiException if fails to make API call
        */
        public CompletableFuture<EventResponse> getEventsByQuery(QueryRequest body) {
        var request = new HashMap<String, Object>();
        
                

        
                
        request.put("body",body);

        CompletableFuture<EventResponse> result = this.streamingClient.sendWithApiCallback("/aapi/getEventsByQuery", request);
        return result;
        }
        }
