/*
 * Ziqni Admin Api
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 3.0.1
 * Contact: support@ziqni.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.ziqni.admin.client.api;

import com.ziqni.admin.client.StreamingClient;
import com.ziqni.admin.client.ApiClient;
import com.ziqni.admin.client.ApiException;
import com.ziqni.admin.client.ApiResponse;
import com.ziqni.admin.client.Pair;
import com.ziqni.admin.client.model.AchievementIssuedResponse;
import com.ziqni.admin.client.model.AchievementLiveStatusRequest;
import com.ziqni.admin.client.model.AchievementResponse;
import com.ziqni.admin.client.model.CloneAchievementResponse;
import com.ziqni.admin.client.model.CreateAchievementRequest;
import com.ziqni.admin.client.model.MemberAchievementIssuedResponse;
import com.ziqni.admin.client.model.ModelApiResponse;
import com.ziqni.admin.client.model.QueryRequest;
import com.ziqni.admin.client.model.UpdateAchievementRequest;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.time.Duration;
import java.util.*;

import java.util.concurrent.CompletableFuture;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
    public class AchievementsApiWs extends AchievementsApi {
    private final ApiClient apiClient;
    private final ObjectMapper memberVarObjectMapper;
    private final Duration memberVarReadTimeout;
    private final StreamingClient streamingClient;

    public AchievementsApiWs(ApiClient apiClient, StreamingClient streamingClient, Duration readTimeout) {
        this.apiClient = apiClient;
        this.memberVarObjectMapper = apiClient.getObjectMapper();
        this.streamingClient = streamingClient;
        this.memberVarReadTimeout = null;
    }

        /**
        * Create Achievements
        * Create Achievements in the Ziqni database
            * @param body Create Achievements in the Ziqni database (required)
            * @return CompletableFuture&lt;ModelApiResponse&gt;
        * @throws ApiException if fails to make API call
        */
        public CompletableFuture<ModelApiResponse> createAchievements(List<CreateAchievementRequest> body) {
        var request = new HashMap<String, Object>();
        
                

        
                
        request.put("body",body);

        CompletableFuture<ModelApiResponse> result = this.streamingClient.sendWithApiCallback("/aapi/createAchievements", request);
        return result;
        }
        /**
        * Delete Achievements
        * Delete Achievements for a given identifier specified
            * @param id The unique identifiers of the resources (optional
            * @return CompletableFuture&lt;ModelApiResponse&gt;
        * @throws ApiException if fails to make API call
        */
        public CompletableFuture<ModelApiResponse> deleteAchievements(List<String> id) {
        var request = new HashMap<String, Object>();
        var queryParam = new HashMap<String, Object>();
        queryParam.put("id", id);
        request.put("query",queryParam);

        
                
        

        CompletableFuture<ModelApiResponse> result = this.streamingClient.sendWithApiCallback("/aapi/deleteAchievements", request);
        return result;
        }
        /**
        * 
        * Delete Achievements from Ziqni database by unique Achievements ID&#39;s or any other POST body parameters using the POST method
            * @param body Delete Achievements from Ziqni database by unique Achievements ID&#39;s or any other Post body parameters using the POST method (optional)
            * @return CompletableFuture&lt;ModelApiResponse&gt;
        * @throws ApiException if fails to make API call
        */
        public CompletableFuture<ModelApiResponse> deleteAchievementsByQuery(QueryRequest body) {
        var request = new HashMap<String, Object>();
        
                

        
                
        request.put("body",body);

        CompletableFuture<ModelApiResponse> result = this.streamingClient.sendWithApiCallback("/aapi/deleteAchievementsByQuery", request);
        return result;
        }
        /**
        * NOT AVAILABLE IN CURRENT RELEASE
        * Clones an Achievement for the identifier provided
            * @param id Unique identifier of the resource (required)
            * @return CompletableFuture&lt;CloneAchievementResponse&gt;
        * @throws ApiException if fails to make API call
        */
        public CompletableFuture<CloneAchievementResponse> getAchievementToClone(String id) {
        var request = new HashMap<String, Object>();
        
                

        var pathParam = new HashMap<String, Object>();
        pathParam.put("id", id);
        request.put("path",pathParam);
        

        CompletableFuture<CloneAchievementResponse> result = this.streamingClient.sendWithApiCallback("/aapi/getAchievementToClone", request);
        return result;
        }
        /**
        * Get Achievements
        * Returns a list of Achievements. This assumes that achievements have first been uploaded via a POST request or web console
            * @param id The unique identifiers of the resources (optional
            * @param limit Limit the returned total records found (optional)
            * @param skip Skip the returned records found and return the next batch of records (optional)
            * @return CompletableFuture&lt;AchievementResponse&gt;
        * @throws ApiException if fails to make API call
        */
        public CompletableFuture<AchievementResponse> getAchievements(List<String> id, Integer limit, Integer skip) {
        var request = new HashMap<String, Object>();
        var queryParam = new HashMap<String, Object>();
        queryParam.put("id", id);
queryParam.put("limit", limit);
queryParam.put("skip", skip);
        request.put("query",queryParam);

        
                
        

        CompletableFuture<AchievementResponse> result = this.streamingClient.sendWithApiCallback("/aapi/getAchievements", request);
        return result;
        }
        /**
        * 
        * Retrieve Achievements from Ziqni database by unique Achievements ID&#39;s or any other POST body parameters using the POST method
            * @param body Retrieve Achievements from Ziqni database by unique Achievements ID&#39;s or any other Post body parameters using the POST method (optional)
            * @return CompletableFuture&lt;AchievementResponse&gt;
        * @throws ApiException if fails to make API call
        */
        public CompletableFuture<AchievementResponse> getAchievementsByQuery(QueryRequest body) {
        var request = new HashMap<String, Object>();
        
                

        
                
        request.put("body",body);

        CompletableFuture<AchievementResponse> result = this.streamingClient.sendWithApiCallback("/aapi/getAchievementsByQuery", request);
        return result;
        }
        /**
        * NOT AVAILABLE IN CURRENT RELEASE
        * Receive a list of Antecedent Achievements for the Achievement identified provided
            * @param id Unique identifier of the resource (required)
            * @param limit Limit the returned total records found (optional)
            * @param skip Skip the returned records found and return the next batch of records (optional)
            * @return CompletableFuture&lt;AchievementResponse&gt;
        * @throws ApiException if fails to make API call
        */
        public CompletableFuture<AchievementResponse> getAntecendentsForAchievement(String id, Integer limit, Integer skip) {
        var request = new HashMap<String, Object>();
        var queryParam = new HashMap<String, Object>();
        queryParam.put("limit", limit);
queryParam.put("skip", skip);
        request.put("query",queryParam);

        var pathParam = new HashMap<String, Object>();
        pathParam.put("id", id);
        request.put("path",pathParam);
        

        CompletableFuture<AchievementResponse> result = this.streamingClient.sendWithApiCallback("/aapi/getAntecendentsForAchievement", request);
        return result;
        }
        /**
        * NOT AVAILABLE IN CURRENT RELEASE
        * Receive a list of Descendent Achievements for the Achievement identified provided
            * @param id Unique identifier of the resource (required)
            * @param limit Limit the returned total records found (optional)
            * @param skip Skip the returned records found and return the next batch of records (optional)
            * @return CompletableFuture&lt;AchievementResponse&gt;
        * @throws ApiException if fails to make API call
        */
        public CompletableFuture<AchievementResponse> getDesendentsForAchievement(String id, Integer limit, Integer skip) {
        var request = new HashMap<String, Object>();
        var queryParam = new HashMap<String, Object>();
        queryParam.put("limit", limit);
queryParam.put("skip", skip);
        request.put("query",queryParam);

        var pathParam = new HashMap<String, Object>();
        pathParam.put("id", id);
        request.put("path",pathParam);
        

        CompletableFuture<AchievementResponse> result = this.streamingClient.sendWithApiCallback("/aapi/getDesendentsForAchievement", request);
        return result;
        }
        /**
        * NOT AVAILABLE IN CURRENT RELEASE
        * Receive a count of Issued Achievements by identifier provided
            * @param id Unique identifier of the resource (required)
            * @return CompletableFuture&lt;AchievementIssuedResponse&gt;
        * @throws ApiException if fails to make API call
        */
        public CompletableFuture<AchievementIssuedResponse> getIssuedAchievementsCountById(String id) {
        var request = new HashMap<String, Object>();
        
                

        var pathParam = new HashMap<String, Object>();
        pathParam.put("id", id);
        request.put("path",pathParam);
        

        CompletableFuture<AchievementIssuedResponse> result = this.streamingClient.sendWithApiCallback("/aapi/getIssuedAchievementsCountById", request);
        return result;
        }
        /**
        * NOT AVAILABLE IN CURRENT RELEASE
        * Receive a list of members that had an Achievement issued for the Achievement identified provided
            * @param id Unique identifier of the resource (required)
            * @param memberId Id of a member (optional)
            * @param limit Limit the returned total records found (optional)
            * @param skip Skip the returned records found and return the next batch of records (optional)
            * @return CompletableFuture&lt;MemberAchievementIssuedResponse&gt;
        * @throws ApiException if fails to make API call
        */
        public CompletableFuture<MemberAchievementIssuedResponse> getMembersAchievementsDetails(String id, String memberId, Integer limit, Integer skip) {
        var request = new HashMap<String, Object>();
        var queryParam = new HashMap<String, Object>();
        queryParam.put("memberId", memberId);
queryParam.put("limit", limit);
queryParam.put("skip", skip);
        request.put("query",queryParam);

        var pathParam = new HashMap<String, Object>();
        pathParam.put("id", id);
        request.put("path",pathParam);
        

        CompletableFuture<MemberAchievementIssuedResponse> result = this.streamingClient.sendWithApiCallback("/aapi/getMembersAchievementsDetails", request);
        return result;
        }
        /**
        * Update Achievements
        * Update existing Achievements in the Ziqni database
            * @param body Update Achievements in the Ziqni database. * An Achievement Id must exist in the Ziqni database for update (required)
            * @return CompletableFuture&lt;ModelApiResponse&gt;
        * @throws ApiException if fails to make API call
        */
        public CompletableFuture<ModelApiResponse> updateAchievements(List<UpdateAchievementRequest> body) {
        var request = new HashMap<String, Object>();
        
                

        
                
        request.put("body",body);

        CompletableFuture<ModelApiResponse> result = this.streamingClient.sendWithApiCallback("/aapi/updateAchievements", request);
        return result;
        }
        /**
        * 
        * Manage the state of achievement - Draft, Live, Archived
            * @param body Updates the state of the Achievement (optional
            * @return CompletableFuture&lt;ModelApiResponse&gt;
        * @throws ApiException if fails to make API call
        */
        public CompletableFuture<ModelApiResponse> updateAchievementsLiveStatus(List<AchievementLiveStatusRequest> body) {
        var request = new HashMap<String, Object>();
        
                

        
                
        request.put("body",body);

        CompletableFuture<ModelApiResponse> result = this.streamingClient.sendWithApiCallback("/aapi/updateAchievementsLiveStatus", request);
        return result;
        }
        }
