"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

/**
 * The FileObjectAllOf model module.
 * @module model/FileObjectAllOf
 * @version 0.0.26
 */
var FileObjectAllOf = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>FileObjectAllOf</code>.
   * @alias module:model/FileObjectAllOf
   * @param repositoryId {String} The repository identifier this file belongs too
   * @param name {String} Name of the original file uploaded
   * @param mimeType {String} Mime type of the file. Valid mime types - text/csv or application/vmd.ms-excelor or application/x-directory for directories
   * @param path {String} The name of the attachment within the bucket
   * @param parentFolderPath {String} The folder name containing the attachment within the bucket
   */
  function FileObjectAllOf(repositoryId, name, mimeType, path, parentFolderPath) {
    _classCallCheck(this, FileObjectAllOf);

    FileObjectAllOf.initialize(this, repositoryId, name, mimeType, path, parentFolderPath);
  }
  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */


  _createClass(FileObjectAllOf, null, [{
    key: "initialize",
    value: function initialize(obj, repositoryId, name, mimeType, path, parentFolderPath) {
      obj['repositoryId'] = repositoryId;
      obj['name'] = name;
      obj['mimeType'] = mimeType;
      obj['path'] = path;
      obj['parentFolderPath'] = parentFolderPath;
    }
    /**
     * Constructs a <code>FileObjectAllOf</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FileObjectAllOf} obj Optional instance to populate.
     * @return {module:model/FileObjectAllOf} The populated <code>FileObjectAllOf</code> instance.
     */

  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new FileObjectAllOf();

        if (data.hasOwnProperty('repositoryId')) {
          obj['repositoryId'] = _ApiClient["default"].convertToType(data['repositoryId'], 'String');
        }

        if (data.hasOwnProperty('name')) {
          obj['name'] = _ApiClient["default"].convertToType(data['name'], 'String');
        }

        if (data.hasOwnProperty('mimeType')) {
          obj['mimeType'] = _ApiClient["default"].convertToType(data['mimeType'], 'String');
        }

        if (data.hasOwnProperty('path')) {
          obj['path'] = _ApiClient["default"].convertToType(data['path'], 'String');
        }

        if (data.hasOwnProperty('parentFolderPath')) {
          obj['parentFolderPath'] = _ApiClient["default"].convertToType(data['parentFolderPath'], 'String');
        }

        if (data.hasOwnProperty('uri')) {
          obj['uri'] = _ApiClient["default"].convertToType(data['uri'], 'String');
        }

        if (data.hasOwnProperty('size')) {
          obj['size'] = _ApiClient["default"].convertToType(data['size'], 'Number');
        }

        if (data.hasOwnProperty('constraints')) {
          obj['constraints'] = _ApiClient["default"].convertToType(data['constraints'], ['String']);
        }
      }

      return obj;
    }
  }]);

  return FileObjectAllOf;
}();
/**
 * The repository identifier this file belongs too
 * @member {String} repositoryId
 */


FileObjectAllOf.prototype['repositoryId'] = undefined;
/**
 * Name of the original file uploaded
 * @member {String} name
 */

FileObjectAllOf.prototype['name'] = undefined;
/**
 * Mime type of the file. Valid mime types - text/csv or application/vmd.ms-excelor or application/x-directory for directories
 * @member {String} mimeType
 */

FileObjectAllOf.prototype['mimeType'] = undefined;
/**
 * The name of the attachment within the bucket
 * @member {String} path
 */

FileObjectAllOf.prototype['path'] = undefined;
/**
 * The folder name containing the attachment within the bucket
 * @member {String} parentFolderPath
 */

FileObjectAllOf.prototype['parentFolderPath'] = undefined;
/**
 * The uniform resource identifier where the file can be viewed/downloaded
 * @member {String} uri
 */

FileObjectAllOf.prototype['uri'] = undefined;
/**
 * The size of the file
 * @member {Number} size
 */

FileObjectAllOf.prototype['size'] = undefined;
/**
 * Additional constraints, if the value is present it means the
 * @member {Array.<String>} constraints
 */

FileObjectAllOf.prototype['constraints'] = undefined;
var _default = FileObjectAllOf;
exports["default"] = _default;