"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

var _UnitOfMeasureType = _interopRequireDefault(require("./UnitOfMeasureType"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

/**
 * The CreateUnitOfMeasureRequestAllOf model module.
 * @module model/CreateUnitOfMeasureRequestAllOf
 * @version 0.0.26
 */
var CreateUnitOfMeasureRequestAllOf = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>CreateUnitOfMeasureRequestAllOf</code>.
   * @alias module:model/CreateUnitOfMeasureRequestAllOf
   * @param name {String} The name of a unit of measure
   * @param key {String} The reference to the unit of measure in your system
   * @param multiplier {Number} Is used to multiply the value from the standardised one that is being used
   * @param unitOfMeasureType {module:model/UnitOfMeasureType} 
   */
  function CreateUnitOfMeasureRequestAllOf(name, key, multiplier, unitOfMeasureType) {
    _classCallCheck(this, CreateUnitOfMeasureRequestAllOf);

    CreateUnitOfMeasureRequestAllOf.initialize(this, name, key, multiplier, unitOfMeasureType);
  }
  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */


  _createClass(CreateUnitOfMeasureRequestAllOf, null, [{
    key: "initialize",
    value: function initialize(obj, name, key, multiplier, unitOfMeasureType) {
      obj['name'] = name;
      obj['key'] = key;
      obj['multiplier'] = multiplier;
      obj['unitOfMeasureType'] = unitOfMeasureType;
    }
    /**
     * Constructs a <code>CreateUnitOfMeasureRequestAllOf</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateUnitOfMeasureRequestAllOf} obj Optional instance to populate.
     * @return {module:model/CreateUnitOfMeasureRequestAllOf} The populated <code>CreateUnitOfMeasureRequestAllOf</code> instance.
     */

  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new CreateUnitOfMeasureRequestAllOf();

        if (data.hasOwnProperty('name')) {
          obj['name'] = _ApiClient["default"].convertToType(data['name'], 'String');
        }

        if (data.hasOwnProperty('key')) {
          obj['key'] = _ApiClient["default"].convertToType(data['key'], 'String');
        }

        if (data.hasOwnProperty('description')) {
          obj['description'] = _ApiClient["default"].convertToType(data['description'], 'String');
        }

        if (data.hasOwnProperty('isoCode')) {
          obj['isoCode'] = _ApiClient["default"].convertToType(data['isoCode'], 'String');
        }

        if (data.hasOwnProperty('symbol')) {
          obj['symbol'] = _ApiClient["default"].convertToType(data['symbol'], 'String');
        }

        if (data.hasOwnProperty('multiplier')) {
          obj['multiplier'] = _ApiClient["default"].convertToType(data['multiplier'], 'Number');
        }

        if (data.hasOwnProperty('unitOfMeasureType')) {
          obj['unitOfMeasureType'] = _UnitOfMeasureType["default"].constructFromObject(data['unitOfMeasureType']);
        }
      }

      return obj;
    }
  }]);

  return CreateUnitOfMeasureRequestAllOf;
}();
/**
 * The name of a unit of measure
 * @member {String} name
 */


CreateUnitOfMeasureRequestAllOf.prototype['name'] = undefined;
/**
 * The reference to the unit of measure in your system
 * @member {String} key
 */

CreateUnitOfMeasureRequestAllOf.prototype['key'] = undefined;
/**
 * The description of a unit of measure
 * @member {String} description
 */

CreateUnitOfMeasureRequestAllOf.prototype['description'] = undefined;
/**
 * An alphabetical or numerical code to identify a unit of measure
 * @member {String} isoCode
 */

CreateUnitOfMeasureRequestAllOf.prototype['isoCode'] = undefined;
/**
 * The symbol of a unit of measure
 * @member {String} symbol
 */

CreateUnitOfMeasureRequestAllOf.prototype['symbol'] = undefined;
/**
 * Is used to multiply the value from the standardised one that is being used
 * @member {Number} multiplier
 */

CreateUnitOfMeasureRequestAllOf.prototype['multiplier'] = undefined;
/**
 * @member {module:model/UnitOfMeasureType} unitOfMeasureType
 */

CreateUnitOfMeasureRequestAllOf.prototype['unitOfMeasureType'] = undefined;
var _default = CreateUnitOfMeasureRequestAllOf;
exports["default"] = _default;