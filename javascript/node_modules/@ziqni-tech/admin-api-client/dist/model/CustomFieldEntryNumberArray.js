"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

var _CustomFieldEntry = _interopRequireDefault(require("./CustomFieldEntry"));

var _CustomFieldEntryNumberArrayAllOf = _interopRequireDefault(require("./CustomFieldEntryNumberArrayAllOf"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

/**
 * The CustomFieldEntryNumberArray model module.
 * @module model/CustomFieldEntryNumberArray
 * @version 0.0.26
 */
var CustomFieldEntryNumberArray = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>CustomFieldEntryNumberArray</code>.
   * The base type for custom field entries
   * @alias module:model/CustomFieldEntryNumberArray
   * @implements module:model/CustomFieldEntryNumberArrayAllOf
   * @implements module:model/CustomFieldEntry
   * @param fieldType {String} The data type stored in this generic object ( string, number, string[], number[])
   */
  function CustomFieldEntryNumberArray(fieldType) {
    _classCallCheck(this, CustomFieldEntryNumberArray);

    _CustomFieldEntryNumberArrayAllOf["default"].initialize(this, fieldType);

    _CustomFieldEntry["default"].initialize(this, fieldType);

    CustomFieldEntryNumberArray.initialize(this, fieldType);
  }
  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */


  _createClass(CustomFieldEntryNumberArray, null, [{
    key: "initialize",
    value: function initialize(obj, fieldType) {
      obj['fieldType'] = fieldType;
    }
    /**
     * Constructs a <code>CustomFieldEntryNumberArray</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CustomFieldEntryNumberArray} obj Optional instance to populate.
     * @return {module:model/CustomFieldEntryNumberArray} The populated <code>CustomFieldEntryNumberArray</code> instance.
     */

  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new CustomFieldEntryNumberArray();

        _CustomFieldEntryNumberArrayAllOf["default"].constructFromObject(data, obj);

        _CustomFieldEntry["default"].constructFromObject(data, obj);

        if (data.hasOwnProperty('fieldType')) {
          obj['fieldType'] = _ApiClient["default"].convertToType(data['fieldType'], 'String');
        }

        if (data.hasOwnProperty('value')) {
          obj['value'] = _ApiClient["default"].convertToType(data['value'], ['Number']);
        }
      }

      return obj;
    }
  }]);

  return CustomFieldEntryNumberArray;
}();
/**
 * The data type stored in this generic object ( string, number, string[], number[])
 * @member {String} fieldType
 */


CustomFieldEntryNumberArray.prototype['fieldType'] = undefined;
/**
 * @member {Array.<Number>} value
 */

CustomFieldEntryNumberArray.prototype['value'] = undefined; // Implement CustomFieldEntryNumberArrayAllOf interface:

/**
 * The data type stored in this generic object ( string, number, string[], number[])
 * @member {String} fieldType
 */

_CustomFieldEntryNumberArrayAllOf["default"].prototype['fieldType'] = undefined;
/**
 * @member {Array.<Number>} value
 */

_CustomFieldEntryNumberArrayAllOf["default"].prototype['value'] = undefined; // Implement CustomFieldEntry interface:

/**
 * The data type stored in this generic object ( string, number, string[], number[])
 * @member {String} fieldType
 */

_CustomFieldEntry["default"].prototype['fieldType'] = undefined;
var _default = CustomFieldEntryNumberArray;
exports["default"] = _default;