"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

/**
 * The DependantOn model module.
 * @module model/DependantOn
 * @version 0.0.26
 */
var DependantOn = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>DependantOn</code>.
   * @alias module:model/DependantOn
   */
  function DependantOn() {
    _classCallCheck(this, DependantOn);

    DependantOn.initialize(this);
  }
  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */


  _createClass(DependantOn, null, [{
    key: "initialize",
    value: function initialize(obj) {}
    /**
     * Constructs a <code>DependantOn</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DependantOn} obj Optional instance to populate.
     * @return {module:model/DependantOn} The populated <code>DependantOn</code> instance.
     */

  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new DependantOn();

        if (data.hasOwnProperty('must')) {
          obj['must'] = _ApiClient["default"].convertToType(data['must'], ['String']);
        }

        if (data.hasOwnProperty('mustNot')) {
          obj['mustNot'] = _ApiClient["default"].convertToType(data['mustNot'], ['String']);
        }

        if (data.hasOwnProperty('should')) {
          obj['should'] = _ApiClient["default"].convertToType(data['should'], ['String']);
        }

        if (data.hasOwnProperty('shouldMatchAtLeast')) {
          obj['shouldMatchAtLeast'] = _ApiClient["default"].convertToType(data['shouldMatchAtLeast'], 'Number');
        }
      }

      return obj;
    }
  }]);

  return DependantOn;
}();
/**
 * A rule indicating that it has to be included. Players that are in the EU group with a MUST rule - that means only players that have that group can participate
 * @member {Array.<String>} must
 */


DependantOn.prototype['must'] = undefined;
/**
 * A rule indicating that it will not be included. Players that are in the EU group with a MUST-NOT rule - that means that players that have that group can NOT participate
 * @member {Array.<String>} mustNot
 */

DependantOn.prototype['mustNot'] = undefined;
/**
 * A rule indicating that some of them have to be included. Dependancy on shouldMatchAtLeast parameter. Players that are in the EU and DE groups with a SHOULD rule and a shouldMatchAtLeast with a value of 1 - that means that players that have 1 of the groups can participate
 * @member {Array.<String>} should
 */

DependantOn.prototype['should'] = undefined;
/**
 * Dependant on should. Triggered when 2 or more should parameters selected
 * @member {Number} shouldMatchAtLeast
 */

DependantOn.prototype['shouldMatchAtLeast'] = undefined;
var _default = DependantOn;
exports["default"] = _default;