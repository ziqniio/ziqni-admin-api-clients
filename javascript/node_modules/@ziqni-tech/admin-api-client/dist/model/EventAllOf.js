"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

/**
 * The EventAllOf model module.
 * @module model/EventAllOf
 * @version 0.0.26
 */
var EventAllOf = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>EventAllOf</code>.
   * @alias module:model/EventAllOf
   * @param action {String} The identifier that describes the meaning of this event
   * @param sourceValue {Number} The actual numerical value related to the event
   * @param points {Number} A value derived from the source value field. In the context of Product additionally an adjustment factor will be applied
   * @param transactionTimestamp {Date} ISO8601 timestamp for when this event happened. All records are stored in UTC time zone
   */
  function EventAllOf(action, sourceValue, points, transactionTimestamp) {
    _classCallCheck(this, EventAllOf);

    EventAllOf.initialize(this, action, sourceValue, points, transactionTimestamp);
  }
  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */


  _createClass(EventAllOf, null, [{
    key: "initialize",
    value: function initialize(obj, action, sourceValue, points, transactionTimestamp) {
      obj['action'] = action;
      obj['sourceValue'] = sourceValue;
      obj['points'] = points;
      obj['transactionTimestamp'] = transactionTimestamp;
    }
    /**
     * Constructs a <code>EventAllOf</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EventAllOf} obj Optional instance to populate.
     * @return {module:model/EventAllOf} The populated <code>EventAllOf</code> instance.
     */

  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new EventAllOf();

        if (data.hasOwnProperty('memberId')) {
          obj['memberId'] = _ApiClient["default"].convertToType(data['memberId'], 'String');
        }

        if (data.hasOwnProperty('memberRefId')) {
          obj['memberRefId'] = _ApiClient["default"].convertToType(data['memberRefId'], 'String');
        }

        if (data.hasOwnProperty('action')) {
          obj['action'] = _ApiClient["default"].convertToType(data['action'], 'String');
        }

        if (data.hasOwnProperty('batchId')) {
          obj['batchId'] = _ApiClient["default"].convertToType(data['batchId'], 'String');
        }

        if (data.hasOwnProperty('entityId')) {
          obj['entityId'] = _ApiClient["default"].convertToType(data['entityId'], 'String');
        }

        if (data.hasOwnProperty('entityRefId')) {
          obj['entityRefId'] = _ApiClient["default"].convertToType(data['entityRefId'], 'String');
        }

        if (data.hasOwnProperty('sourceValue')) {
          obj['sourceValue'] = _ApiClient["default"].convertToType(data['sourceValue'], 'Number');
        }

        if (data.hasOwnProperty('points')) {
          obj['points'] = _ApiClient["default"].convertToType(data['points'], 'Number');
        }

        if (data.hasOwnProperty('transactionTimestamp')) {
          obj['transactionTimestamp'] = _ApiClient["default"].convertToType(data['transactionTimestamp'], 'Date');
        }

        if (data.hasOwnProperty('metadata')) {
          obj['metadata'] = _ApiClient["default"].convertToType(data['metadata'], {
            'String': Object
          });
        }

        if (data.hasOwnProperty('customFields')) {
          obj['customFields'] = _ApiClient["default"].convertToType(data['customFields'], {
            'String': Object
          });
        }

        if (data.hasOwnProperty('tags')) {
          obj['tags'] = _ApiClient["default"].convertToType(data['tags'], ['String']);
        }

        if (data.hasOwnProperty('relatesTo')) {
          obj['relatesTo'] = _ApiClient["default"].convertToType(data['relatesTo'], ['String']);
        }

        if (data.hasOwnProperty('relatesToExternal')) {
          obj['relatesToExternal'] = _ApiClient["default"].convertToType(data['relatesToExternal'], ['String']);
        }
      }

      return obj;
    }
  }]);

  return EventAllOf;
}();
/**
 * Unique system identifier of a Member
 * @member {String} memberId
 */


EventAllOf.prototype['memberId'] = undefined;
/**
 * The reference to this member in external system
 * @member {String} memberRefId
 */

EventAllOf.prototype['memberRefId'] = undefined;
/**
 * The identifier that describes the meaning of this event
 * @member {String} action
 */

EventAllOf.prototype['action'] = undefined;
/**
 * The batch identifier is used to group related event stream data together. This could be as simple as a UUID or your internal reference to that distinct player session event
 * @member {String} batchId
 */

EventAllOf.prototype['batchId'] = undefined;
/**
 * It is a reference to a models ID for any of the following objects - Product, Achievement, Reward, Award
 * @member {String} entityId
 */

EventAllOf.prototype['entityId'] = undefined;
/**
 * It is a reference to a models ID for any of the following objects - Product, Achievement, Reward, Award
 * @member {String} entityRefId
 */

EventAllOf.prototype['entityRefId'] = undefined;
/**
 * The actual numerical value related to the event
 * @member {Number} sourceValue
 */

EventAllOf.prototype['sourceValue'] = undefined;
/**
 * A value derived from the source value field. In the context of Product additionally an adjustment factor will be applied
 * @member {Number} points
 */

EventAllOf.prototype['points'] = undefined;
/**
 * ISO8601 timestamp for when this event happened. All records are stored in UTC time zone
 * @member {Date} transactionTimestamp
 */

EventAllOf.prototype['transactionTimestamp'] = undefined;
/**
 * Event metadata map.
 * @member {Object.<String, Object>} metadata
 */

EventAllOf.prototype['metadata'] = undefined;
/**
 * @member {Object.<String, Object>} customFields
 */

EventAllOf.prototype['customFields'] = undefined;
/**
 * A list of Strings of groups that the tag belongs to
 * @member {Array.<String>} tags
 */

EventAllOf.prototype['tags'] = undefined;
/**
 * @member {Array.<String>} relatesTo
 */

EventAllOf.prototype['relatesTo'] = undefined;
/**
 * @member {Array.<String>} relatesToExternal
 */

EventAllOf.prototype['relatesToExternal'] = undefined;
var _default = EventAllOf;
exports["default"] = _default;