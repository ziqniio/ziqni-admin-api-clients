"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

var _CreateRewardRequest = _interopRequireDefault(require("./CreateRewardRequest"));

var _RoundType = _interopRequireDefault(require("./RoundType"));

var _Rule = _interopRequireDefault(require("./Rule"));

var _Strategy = _interopRequireDefault(require("./Strategy"));

var _Translation = _interopRequireDefault(require("./Translation"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

/**
 * The CreateContestForCompetitionRequestAllOf model module.
 * @module model/CreateContestForCompetitionRequestAllOf
 * @version 0.0.26
 */
var CreateContestForCompetitionRequestAllOf = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>CreateContestForCompetitionRequestAllOf</code>.
   * @alias module:model/CreateContestForCompetitionRequestAllOf
   * @param competitionId {String} A unique identifier of a Competition
   * @param row {Number} The row number for displaying the Contest in a table
   * @param round {Number} To what round does the contest belong
   * @param name {String} A name for the Contest. Can be translated
   * @param roundType {module:model/RoundType} 
   * @param minNumberOfEntrants {Number} Minimum number of entrants for the contest
   * @param scheduledStartDate {Date} ISO8601 timestamp for when a Contest should start. All records are stored in UTC time zone
   * @param scheduledEndDate {Date} ISO8601 timestamp for when a Contest should end. All records are stored in UTC time zone
   * @param strategies {module:model/Strategy} 
   * @param constraints {Array.<String>} Additional constraints
   */
  function CreateContestForCompetitionRequestAllOf(competitionId, row, round, name, roundType, minNumberOfEntrants, scheduledStartDate, scheduledEndDate, strategies, constraints) {
    _classCallCheck(this, CreateContestForCompetitionRequestAllOf);

    CreateContestForCompetitionRequestAllOf.initialize(this, competitionId, row, round, name, roundType, minNumberOfEntrants, scheduledStartDate, scheduledEndDate, strategies, constraints);
  }
  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */


  _createClass(CreateContestForCompetitionRequestAllOf, null, [{
    key: "initialize",
    value: function initialize(obj, competitionId, row, round, name, roundType, minNumberOfEntrants, scheduledStartDate, scheduledEndDate, strategies, constraints) {
      obj['competitionId'] = competitionId;
      obj['row'] = row;
      obj['round'] = round;
      obj['name'] = name;
      obj['roundType'] = roundType;
      obj['minNumberOfEntrants'] = minNumberOfEntrants;
      obj['scheduledStartDate'] = scheduledStartDate;
      obj['scheduledEndDate'] = scheduledEndDate;
      obj['strategies'] = strategies;
      obj['constraints'] = constraints;
    }
    /**
     * Constructs a <code>CreateContestForCompetitionRequestAllOf</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateContestForCompetitionRequestAllOf} obj Optional instance to populate.
     * @return {module:model/CreateContestForCompetitionRequestAllOf} The populated <code>CreateContestForCompetitionRequestAllOf</code> instance.
     */

  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new CreateContestForCompetitionRequestAllOf();

        if (data.hasOwnProperty('competitionId')) {
          obj['competitionId'] = _ApiClient["default"].convertToType(data['competitionId'], 'String');
        }

        if (data.hasOwnProperty('row')) {
          obj['row'] = _ApiClient["default"].convertToType(data['row'], 'Number');
        }

        if (data.hasOwnProperty('round')) {
          obj['round'] = _ApiClient["default"].convertToType(data['round'], 'Number');
        }

        if (data.hasOwnProperty('groupStage')) {
          obj['groupStage'] = _ApiClient["default"].convertToType(data['groupStage'], 'Number');
        }

        if (data.hasOwnProperty('groupStageLabel')) {
          obj['groupStageLabel'] = _ApiClient["default"].convertToType(data['groupStageLabel'], 'String');
        }

        if (data.hasOwnProperty('entrantsFromContest')) {
          obj['entrantsFromContest'] = _ApiClient["default"].convertToType(data['entrantsFromContest'], ['String']);
        }

        if (data.hasOwnProperty('name')) {
          obj['name'] = _ApiClient["default"].convertToType(data['name'], 'String');
        }

        if (data.hasOwnProperty('description')) {
          obj['description'] = _ApiClient["default"].convertToType(data['description'], 'String');
        }

        if (data.hasOwnProperty('termsAndConditions')) {
          obj['termsAndConditions'] = _ApiClient["default"].convertToType(data['termsAndConditions'], 'String');
        }

        if (data.hasOwnProperty('roundType')) {
          obj['roundType'] = _RoundType["default"].constructFromObject(data['roundType']);
        }

        if (data.hasOwnProperty('maxNumberOfEntrants')) {
          obj['maxNumberOfEntrants'] = _ApiClient["default"].convertToType(data['maxNumberOfEntrants'], 'Number');
        }

        if (data.hasOwnProperty('minNumberOfEntrants')) {
          obj['minNumberOfEntrants'] = _ApiClient["default"].convertToType(data['minNumberOfEntrants'], 'Number');
        }

        if (data.hasOwnProperty('rules')) {
          obj['rules'] = _ApiClient["default"].convertToType(data['rules'], [_Rule["default"]]);
        }

        if (data.hasOwnProperty('scheduledStartDate')) {
          obj['scheduledStartDate'] = _ApiClient["default"].convertToType(data['scheduledStartDate'], 'Date');
        }

        if (data.hasOwnProperty('scheduledEndDate')) {
          obj['scheduledEndDate'] = _ApiClient["default"].convertToType(data['scheduledEndDate'], 'Date');
        }

        if (data.hasOwnProperty('strategies')) {
          obj['strategies'] = _Strategy["default"].constructFromObject(data['strategies']);
        }

        if (data.hasOwnProperty('translations')) {
          obj['translations'] = _ApiClient["default"].convertToType(data['translations'], [_Translation["default"]]);
        }

        if (data.hasOwnProperty('rewards')) {
          obj['rewards'] = _ApiClient["default"].convertToType(data['rewards'], [_CreateRewardRequest["default"]]);
        }

        if (data.hasOwnProperty('constraints')) {
          obj['constraints'] = _ApiClient["default"].convertToType(data['constraints'], ['String']);
        }
      }

      return obj;
    }
  }]);

  return CreateContestForCompetitionRequestAllOf;
}();
/**
 * A unique identifier of a Competition
 * @member {String} competitionId
 */


CreateContestForCompetitionRequestAllOf.prototype['competitionId'] = undefined;
/**
 * The row number for displaying the Contest in a table
 * @member {Number} row
 */

CreateContestForCompetitionRequestAllOf.prototype['row'] = undefined;
/**
 * To what round does the contest belong
 * @member {Number} round
 */

CreateContestForCompetitionRequestAllOf.prototype['round'] = undefined;
/**
 * Is used for more complex Competitions e.g. multi round competitions where round 1 group stage matched round 2
 * @member {Number} groupStage
 */

CreateContestForCompetitionRequestAllOf.prototype['groupStage'] = undefined;
/**
 * The name of the group stages
 * @member {String} groupStageLabel
 */

CreateContestForCompetitionRequestAllOf.prototype['groupStageLabel'] = undefined;
/**
 * A list of Ziqni contest identifiers to allow contests chaining. When a Progression competition is active and you have a 2 round competition the first round has to reference the second round then this parameter becomes mandatory instead of Optional.
 * @member {Array.<String>} entrantsFromContest
 */

CreateContestForCompetitionRequestAllOf.prototype['entrantsFromContest'] = undefined;
/**
 * A name for the Contest. Can be translated
 * @member {String} name
 */

CreateContestForCompetitionRequestAllOf.prototype['name'] = undefined;
/**
 * A name for the Contest. Can be translated
 * @member {String} description
 */

CreateContestForCompetitionRequestAllOf.prototype['description'] = undefined;
/**
 * A name for the Contest. Can be translated
 * @member {String} termsAndConditions
 */

CreateContestForCompetitionRequestAllOf.prototype['termsAndConditions'] = undefined;
/**
 * @member {module:model/RoundType} roundType
 */

CreateContestForCompetitionRequestAllOf.prototype['roundType'] = undefined;
/**
 * Maximum number of entrants for the contest
 * @member {Number} maxNumberOfEntrants
 */

CreateContestForCompetitionRequestAllOf.prototype['maxNumberOfEntrants'] = undefined;
/**
 * Minimum number of entrants for the contest
 * @member {Number} minNumberOfEntrants
 */

CreateContestForCompetitionRequestAllOf.prototype['minNumberOfEntrants'] = undefined;
/**
 * @member {Array.<module:model/Rule>} rules
 */

CreateContestForCompetitionRequestAllOf.prototype['rules'] = undefined;
/**
 * ISO8601 timestamp for when a Contest should start. All records are stored in UTC time zone
 * @member {Date} scheduledStartDate
 */

CreateContestForCompetitionRequestAllOf.prototype['scheduledStartDate'] = undefined;
/**
 * ISO8601 timestamp for when a Contest should end. All records are stored in UTC time zone
 * @member {Date} scheduledEndDate
 */

CreateContestForCompetitionRequestAllOf.prototype['scheduledEndDate'] = undefined;
/**
 * @member {module:model/Strategy} strategies
 */

CreateContestForCompetitionRequestAllOf.prototype['strategies'] = undefined;
/**
 * @member {Array.<module:model/Translation>} translations
 */

CreateContestForCompetitionRequestAllOf.prototype['translations'] = undefined;
/**
 * @member {Array.<module:model/CreateRewardRequest>} rewards
 */

CreateContestForCompetitionRequestAllOf.prototype['rewards'] = undefined;
/**
 * Additional constraints
 * @member {Array.<String>} constraints
 */

CreateContestForCompetitionRequestAllOf.prototype['constraints'] = undefined;
var _default = CreateContestForCompetitionRequestAllOf;
exports["default"] = _default;