"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

var _KafkaConnection = _interopRequireDefault(require("./KafkaConnection"));

var _RabbitMqConnection = _interopRequireDefault(require("./RabbitMqConnection"));

var _SqsConnection = _interopRequireDefault(require("./SqsConnection"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

/**
 * The Connection model module.
 * @module model/Connection
 * @version 0.0.26
 */
var Connection = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>Connection</code>.
   * @alias module:model/Connection
   * @implements module:model/KafkaConnection
   * @implements module:model/RabbitMqConnection
   * @implements module:model/SqsConnection
   * @param name {String} The type of the consumer
   * @param brokers {String} Kafka broker endpoints.
   * @param groupId {String} Group Id for connection
   * @param topic {String} Topic name
   * @param lastKnownStatus {String} Last known status of the connection
   * @param lastKnownStatusCode {Number} Status code correspoding to the last known status
   * @param transformerId {String} The transformer to use, if empty the default system transformer will be used
   * @param id {String} A unique system generated identifier
   * @param spaceName {String} This is the space name which is linked to the account
   * @param created {Date} ISO8601 timestamp for when a Model was created. All records are stored in UTC time zone
   * @param uri {String} The SQS endpoint.
   * @param virtualHost {String} The virtual host of the rabbitmq broker
   * @param port {Number} The port number on which consumer will connect on rabbitmq broker
   * @param userName {String} Consumer username for authentication
   * @param password {String} Consumer password for authentication
   * @param queueName {String} Name of the queue
   * @param constraints {Array.<String>} Additional constraints
   * @param acessKey {String} The access key of the IAM user
   */
  function Connection(name, brokers, groupId, topic, lastKnownStatus, lastKnownStatusCode, transformerId, id, spaceName, created, uri, virtualHost, port, userName, password, queueName, constraints, acessKey) {
    _classCallCheck(this, Connection);

    _KafkaConnection["default"].initialize(this, name, brokers, groupId, topic, lastKnownStatus, lastKnownStatusCode, transformerId, id, spaceName, created);

    _RabbitMqConnection["default"].initialize(this, id, spaceName, created, name, uri, virtualHost, port, userName, password, queueName, lastKnownStatus, lastKnownStatusCode, constraints, transformerId);

    _SqsConnection["default"].initialize(this, id, spaceName, created, name, uri, acessKey, lastKnownStatus, lastKnownStatusCode, transformerId);

    Connection.initialize(this, name, brokers, groupId, topic, lastKnownStatus, lastKnownStatusCode, transformerId, id, spaceName, created, uri, virtualHost, port, userName, password, queueName, constraints, acessKey);
  }
  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */


  _createClass(Connection, null, [{
    key: "initialize",
    value: function initialize(obj, name, brokers, groupId, topic, lastKnownStatus, lastKnownStatusCode, transformerId, id, spaceName, created, uri, virtualHost, port, userName, password, queueName, constraints, acessKey) {
      obj['name'] = name;
      obj['brokers'] = brokers;
      obj['groupId'] = groupId;
      obj['topic'] = topic;
      obj['lastKnownStatus'] = lastKnownStatus;
      obj['lastKnownStatusCode'] = lastKnownStatusCode;
      obj['uri'] = uri;
      obj['virtualHost'] = virtualHost;
      obj['port'] = port;
      obj['userName'] = userName;
      obj['password'] = password;
      obj['queueName'] = queueName;
      obj['constraints'] = constraints;
      obj['acessKey'] = acessKey;
    }
    /**
     * Constructs a <code>Connection</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Connection} obj Optional instance to populate.
     * @return {module:model/Connection} The populated <code>Connection</code> instance.
     */

  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new Connection();

        _KafkaConnection["default"].constructFromObject(data, obj);

        _RabbitMqConnection["default"].constructFromObject(data, obj);

        _SqsConnection["default"].constructFromObject(data, obj);

        if (data.hasOwnProperty('id')) {
          obj['id'] = _ApiClient["default"].convertToType(data['id'], 'String');
        }

        if (data.hasOwnProperty('spaceName')) {
          obj['spaceName'] = _ApiClient["default"].convertToType(data['spaceName'], 'String');
        }

        if (data.hasOwnProperty('created')) {
          obj['created'] = _ApiClient["default"].convertToType(data['created'], 'Date');
        }

        if (data.hasOwnProperty('transformerId')) {
          obj['transformerId'] = _ApiClient["default"].convertToType(data['transformerId'], 'String');
        }

        if (data.hasOwnProperty('customFields')) {
          obj['customFields'] = _ApiClient["default"].convertToType(data['customFields'], {
            'String': Object
          });
        }

        if (data.hasOwnProperty('tags')) {
          obj['tags'] = _ApiClient["default"].convertToType(data['tags'], ['String']);
        }

        if (data.hasOwnProperty('metadata')) {
          obj['metadata'] = _ApiClient["default"].convertToType(data['metadata'], {
            'String': 'String'
          });
        }

        if (data.hasOwnProperty('name')) {
          obj['name'] = _ApiClient["default"].convertToType(data['name'], 'String');
        }

        if (data.hasOwnProperty('description')) {
          obj['description'] = _ApiClient["default"].convertToType(data['description'], 'String');
        }

        if (data.hasOwnProperty('brokers')) {
          obj['brokers'] = _ApiClient["default"].convertToType(data['brokers'], 'String');
        }

        if (data.hasOwnProperty('groupId')) {
          obj['groupId'] = _ApiClient["default"].convertToType(data['groupId'], 'String');
        }

        if (data.hasOwnProperty('topic')) {
          obj['topic'] = _ApiClient["default"].convertToType(data['topic'], 'String');
        }

        if (data.hasOwnProperty('lastKnownStatus')) {
          obj['lastKnownStatus'] = _ApiClient["default"].convertToType(data['lastKnownStatus'], 'String');
        }

        if (data.hasOwnProperty('lastKnownStatusCode')) {
          obj['lastKnownStatusCode'] = _ApiClient["default"].convertToType(data['lastKnownStatusCode'], 'Number');
        }

        if (data.hasOwnProperty('connectionType')) {
          obj['connectionType'] = _ApiClient["default"].convertToType(data['connectionType'], 'String');
        }

        if (data.hasOwnProperty('uri')) {
          obj['uri'] = _ApiClient["default"].convertToType(data['uri'], 'String');
        }

        if (data.hasOwnProperty('virtualHost')) {
          obj['virtualHost'] = _ApiClient["default"].convertToType(data['virtualHost'], 'String');
        }

        if (data.hasOwnProperty('port')) {
          obj['port'] = _ApiClient["default"].convertToType(data['port'], 'Number');
        }

        if (data.hasOwnProperty('userName')) {
          obj['userName'] = _ApiClient["default"].convertToType(data['userName'], 'String');
        }

        if (data.hasOwnProperty('password')) {
          obj['password'] = _ApiClient["default"].convertToType(data['password'], 'String');
        }

        if (data.hasOwnProperty('queueName')) {
          obj['queueName'] = _ApiClient["default"].convertToType(data['queueName'], 'String');
        }

        if (data.hasOwnProperty('exchange')) {
          obj['exchange'] = _ApiClient["default"].convertToType(data['exchange'], 'String');
        }

        if (data.hasOwnProperty('routingKey')) {
          obj['routingKey'] = _ApiClient["default"].convertToType(data['routingKey'], 'String');
        }

        if (data.hasOwnProperty('constraints')) {
          obj['constraints'] = _ApiClient["default"].convertToType(data['constraints'], ['String']);
        }

        if (data.hasOwnProperty('acessKey')) {
          obj['acessKey'] = _ApiClient["default"].convertToType(data['acessKey'], 'String');
        }
      }

      return obj;
    }
  }]);

  return Connection;
}();
/**
 * A unique system generated identifier
 * @member {String} id
 */


Connection.prototype['id'] = undefined;
/**
 * This is the space name which is linked to the account
 * @member {String} spaceName
 */

Connection.prototype['spaceName'] = undefined;
/**
 * ISO8601 timestamp for when a Model was created. All records are stored in UTC time zone  
 * @member {Date} created
 */

Connection.prototype['created'] = undefined;
/**
 * @member {String} transformerId
 */

Connection.prototype['transformerId'] = undefined;
/**
 * @member {Object.<String, Object>} customFields
 */

Connection.prototype['customFields'] = undefined;
/**
 * A list of id's used to tag models
 * @member {Array.<String>} tags
 */

Connection.prototype['tags'] = undefined;
/**
 * @member {Object.<String, String>} metadata
 */

Connection.prototype['metadata'] = undefined;
/**
 * The type of the consumer
 * @member {String} name
 */

Connection.prototype['name'] = undefined;
/**
 * The description of the consumer
 * @member {String} description
 */

Connection.prototype['description'] = undefined;
/**
 * Kafka broker endpoints.
 * @member {String} brokers
 */

Connection.prototype['brokers'] = undefined;
/**
 * Group Id for connection
 * @member {String} groupId
 */

Connection.prototype['groupId'] = undefined;
/**
 * Topic name
 * @member {String} topic
 */

Connection.prototype['topic'] = undefined;
/**
 * Last known status of the connection
 * @member {String} lastKnownStatus
 */

Connection.prototype['lastKnownStatus'] = undefined;
/**
 * Status code correspoding to the last known status
 * @member {Number} lastKnownStatusCode
 */

Connection.prototype['lastKnownStatusCode'] = undefined;
/**
 * The type of connection
 * @member {String} connectionType
 */

Connection.prototype['connectionType'] = undefined;
/**
 * The SQS endpoint.
 * @member {String} uri
 */

Connection.prototype['uri'] = undefined;
/**
 * The virtual host of the rabbitmq broker
 * @member {String} virtualHost
 */

Connection.prototype['virtualHost'] = undefined;
/**
 * The port number on which consumer will connect on rabbitmq broker
 * @member {Number} port
 */

Connection.prototype['port'] = undefined;
/**
 * Consumer username for authentication
 * @member {String} userName
 */

Connection.prototype['userName'] = undefined;
/**
 * Consumer password for authentication
 * @member {String} password
 */

Connection.prototype['password'] = undefined;
/**
 * Name of the queue
 * @member {String} queueName
 */

Connection.prototype['queueName'] = undefined;
/**
 * Exchange to connect to
 * @member {String} exchange
 */

Connection.prototype['exchange'] = undefined;
/**
 * Routing key to use
 * @member {String} routingKey
 */

Connection.prototype['routingKey'] = undefined;
/**
 * Additional constraints
 * @member {Array.<String>} constraints
 */

Connection.prototype['constraints'] = undefined;
/**
 * The access key of the IAM user
 * @member {String} acessKey
 */

Connection.prototype['acessKey'] = undefined; // Implement KafkaConnection interface:

/**
 * @member {Object.<String, Object>} customFields
 */

_KafkaConnection["default"].prototype['customFields'] = undefined;
/**
 * A list of id's used to tag models
 * @member {Array.<String>} tags
 */

_KafkaConnection["default"].prototype['tags'] = undefined;
/**
 * @member {Object.<String, String>} metadata
 */

_KafkaConnection["default"].prototype['metadata'] = undefined;
/**
 * The name of the consumer
 * @member {String} name
 */

_KafkaConnection["default"].prototype['name'] = undefined;
/**
 * The description of the consumer
 * @member {String} description
 */

_KafkaConnection["default"].prototype['description'] = undefined;
/**
 * Kafka broker endpoints.
 * @member {String} brokers
 */

_KafkaConnection["default"].prototype['brokers'] = undefined;
/**
 * Group Id for connection
 * @member {String} groupId
 */

_KafkaConnection["default"].prototype['groupId'] = undefined;
/**
 * Topic name
 * @member {String} topic
 */

_KafkaConnection["default"].prototype['topic'] = undefined;
/**
 * Last known status of the connection
 * @member {String} lastKnownStatus
 */

_KafkaConnection["default"].prototype['lastKnownStatus'] = undefined;
/**
 * Status code correspoding to the last known status
 * @member {Number} lastKnownStatusCode
 */

_KafkaConnection["default"].prototype['lastKnownStatusCode'] = undefined;
/**
 * The transformer to use, if empty the default system transformer will be used
 * @member {String} transformerId
 */

_KafkaConnection["default"].prototype['transformerId'] = undefined;
/**
 * The type of connection
 * @member {String} connectionType
 */

_KafkaConnection["default"].prototype['connectionType'] = undefined;
/**
 * A unique system generated identifier
 * @member {String} id
 */

_KafkaConnection["default"].prototype['id'] = undefined;
/**
 * This is the space name which is linked to the account
 * @member {String} spaceName
 */

_KafkaConnection["default"].prototype['spaceName'] = undefined;
/**
 * ISO8601 timestamp for when a Model was created. All records are stored in UTC time zone
 * @member {Date} created
 */

_KafkaConnection["default"].prototype['created'] = undefined; // Implement RabbitMqConnection interface:

/**
 * A unique system generated identifier
 * @member {String} id
 */

_RabbitMqConnection["default"].prototype['id'] = undefined;
/**
 * This is the space name which is linked to the account
 * @member {String} spaceName
 */

_RabbitMqConnection["default"].prototype['spaceName'] = undefined;
/**
 * ISO8601 timestamp for when a Model was created. All records are stored in UTC time zone
 * @member {Date} created
 */

_RabbitMqConnection["default"].prototype['created'] = undefined;
/**
 * @member {Object.<String, Object>} customFields
 */

_RabbitMqConnection["default"].prototype['customFields'] = undefined;
/**
 * A list of id's used to tag models
 * @member {Array.<String>} tags
 */

_RabbitMqConnection["default"].prototype['tags'] = undefined;
/**
 * @member {Object.<String, String>} metadata
 */

_RabbitMqConnection["default"].prototype['metadata'] = undefined;
/**
 * The name of the consumer
 * @member {String} name
 */

_RabbitMqConnection["default"].prototype['name'] = undefined;
/**
 * The description of the consumer
 * @member {String} description
 */

_RabbitMqConnection["default"].prototype['description'] = undefined;
/**
 * The SQS endpoint.
 * @member {String} uri
 */

_RabbitMqConnection["default"].prototype['uri'] = undefined;
/**
 * The virtual host of the rabbitmq broker
 * @member {String} virtualHost
 */

_RabbitMqConnection["default"].prototype['virtualHost'] = undefined;
/**
 * The port number on which consumer will connect on rabbitmq broker
 * @member {Number} port
 */

_RabbitMqConnection["default"].prototype['port'] = undefined;
/**
 * Consumer username for authentication
 * @member {String} userName
 */

_RabbitMqConnection["default"].prototype['userName'] = undefined;
/**
 * Consumer password for authentication
 * @member {String} password
 */

_RabbitMqConnection["default"].prototype['password'] = undefined;
/**
 * Name of the queue
 * @member {String} queueName
 */

_RabbitMqConnection["default"].prototype['queueName'] = undefined;
/**
 * Exchange to connect to
 * @member {String} exchange
 */

_RabbitMqConnection["default"].prototype['exchange'] = undefined;
/**
 * Routing key to use
 * @member {String} routingKey
 */

_RabbitMqConnection["default"].prototype['routingKey'] = undefined;
/**
 * Last known status of the connection
 * @member {String} lastKnownStatus
 */

_RabbitMqConnection["default"].prototype['lastKnownStatus'] = undefined;
/**
 * Status code correspoding to the last known status
 * @member {Number} lastKnownStatusCode
 */

_RabbitMqConnection["default"].prototype['lastKnownStatusCode'] = undefined;
/**
 * Additional constraints
 * @member {Array.<String>} constraints
 */

_RabbitMqConnection["default"].prototype['constraints'] = undefined;
/**
 * The transformer to use, if empty the default system transformer will be used
 * @member {String} transformerId
 */

_RabbitMqConnection["default"].prototype['transformerId'] = undefined;
/**
 * The type of connection
 * @member {String} connectionType
 */

_RabbitMqConnection["default"].prototype['connectionType'] = undefined; // Implement SqsConnection interface:

/**
 * A unique system generated identifier
 * @member {String} id
 */

_SqsConnection["default"].prototype['id'] = undefined;
/**
 * This is the space name which is linked to the account
 * @member {String} spaceName
 */

_SqsConnection["default"].prototype['spaceName'] = undefined;
/**
 * ISO8601 timestamp for when a Model was created. All records are stored in UTC time zone
 * @member {Date} created
 */

_SqsConnection["default"].prototype['created'] = undefined;
/**
 * @member {Object.<String, Object>} customFields
 */

_SqsConnection["default"].prototype['customFields'] = undefined;
/**
 * A list of id's used to tag models
 * @member {Array.<String>} tags
 */

_SqsConnection["default"].prototype['tags'] = undefined;
/**
 * @member {Object.<String, String>} metadata
 */

_SqsConnection["default"].prototype['metadata'] = undefined;
/**
 * The type of the consumer
 * @member {String} name
 */

_SqsConnection["default"].prototype['name'] = undefined;
/**
 * The description of the consumer
 * @member {String} description
 */

_SqsConnection["default"].prototype['description'] = undefined;
/**
 * The SQS endpoint.
 * @member {String} uri
 */

_SqsConnection["default"].prototype['uri'] = undefined;
/**
 * The access key of the IAM user
 * @member {String} acessKey
 */

_SqsConnection["default"].prototype['acessKey'] = undefined;
/**
 * Last known status of the connection
 * @member {String} lastKnownStatus
 */

_SqsConnection["default"].prototype['lastKnownStatus'] = undefined;
/**
 * Status code correspoding to the last known status
 * @member {Number} lastKnownStatusCode
 */

_SqsConnection["default"].prototype['lastKnownStatusCode'] = undefined;
/**
 * The transformer to use, if empty the default system transformer will be used
 * @member {String} transformerId
 */

_SqsConnection["default"].prototype['transformerId'] = undefined;
/**
 * The type of connection
 * @member {String} connectionType
 */

_SqsConnection["default"].prototype['connectionType'] = undefined;
var _default = Connection;
exports["default"] = _default;