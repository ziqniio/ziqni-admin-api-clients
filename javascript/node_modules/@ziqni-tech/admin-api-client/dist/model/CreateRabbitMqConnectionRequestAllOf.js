"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

/**
 * The CreateRabbitMqConnectionRequestAllOf model module.
 * @module model/CreateRabbitMqConnectionRequestAllOf
 * @version 0.0.26
 */
var CreateRabbitMqConnectionRequestAllOf = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>CreateRabbitMqConnectionRequestAllOf</code>.
   * @alias module:model/CreateRabbitMqConnectionRequestAllOf
   * @param port {Number} The port number on which consumer will connect on rabbitmq broker
   * @param uri {String} Broker endpoint
   * @param userName {String} Consumer username for authentication
   * @param password {String} Consumer password for authentication
   * @param queueName {String} Name of the queue
   * @param transformerId {String} 
   */
  function CreateRabbitMqConnectionRequestAllOf(port, uri, userName, password, queueName, transformerId) {
    _classCallCheck(this, CreateRabbitMqConnectionRequestAllOf);

    CreateRabbitMqConnectionRequestAllOf.initialize(this, port, uri, userName, password, queueName, transformerId);
  }
  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */


  _createClass(CreateRabbitMqConnectionRequestAllOf, null, [{
    key: "initialize",
    value: function initialize(obj, port, uri, userName, password, queueName, transformerId) {
      obj['port'] = port;
      obj['uri'] = uri;
      obj['userName'] = userName;
      obj['password'] = password;
      obj['queueName'] = queueName;
      obj['transformerId'] = transformerId;
    }
    /**
     * Constructs a <code>CreateRabbitMqConnectionRequestAllOf</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateRabbitMqConnectionRequestAllOf} obj Optional instance to populate.
     * @return {module:model/CreateRabbitMqConnectionRequestAllOf} The populated <code>CreateRabbitMqConnectionRequestAllOf</code> instance.
     */

  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new CreateRabbitMqConnectionRequestAllOf();

        if (data.hasOwnProperty('name')) {
          obj['name'] = _ApiClient["default"].convertToType(data['name'], 'String');
        }

        if (data.hasOwnProperty('description')) {
          obj['description'] = _ApiClient["default"].convertToType(data['description'], 'String');
        }

        if (data.hasOwnProperty('port')) {
          obj['port'] = _ApiClient["default"].convertToType(data['port'], 'Number');
        }

        if (data.hasOwnProperty('virtualHost')) {
          obj['virtualHost'] = _ApiClient["default"].convertToType(data['virtualHost'], 'String');
        }

        if (data.hasOwnProperty('uri')) {
          obj['uri'] = _ApiClient["default"].convertToType(data['uri'], 'String');
        }

        if (data.hasOwnProperty('userName')) {
          obj['userName'] = _ApiClient["default"].convertToType(data['userName'], 'String');
        }

        if (data.hasOwnProperty('password')) {
          obj['password'] = _ApiClient["default"].convertToType(data['password'], 'String');
        }

        if (data.hasOwnProperty('queueName')) {
          obj['queueName'] = _ApiClient["default"].convertToType(data['queueName'], 'String');
        }

        if (data.hasOwnProperty('exchange')) {
          obj['exchange'] = _ApiClient["default"].convertToType(data['exchange'], 'String');
        }

        if (data.hasOwnProperty('routingKey')) {
          obj['routingKey'] = _ApiClient["default"].convertToType(data['routingKey'], 'String');
        }

        if (data.hasOwnProperty('addConstraints')) {
          obj['addConstraints'] = _ApiClient["default"].convertToType(data['addConstraints'], ['String']);
        }

        if (data.hasOwnProperty('transformerId')) {
          obj['transformerId'] = _ApiClient["default"].convertToType(data['transformerId'], 'String');
        }
      }

      return obj;
    }
  }]);

  return CreateRabbitMqConnectionRequestAllOf;
}();
/**
 * The name of the consumer
 * @member {String} name
 */


CreateRabbitMqConnectionRequestAllOf.prototype['name'] = undefined;
/**
 * The description of the consumer
 * @member {String} description
 */

CreateRabbitMqConnectionRequestAllOf.prototype['description'] = undefined;
/**
 * The port number on which consumer will connect on rabbitmq broker
 * @member {Number} port
 */

CreateRabbitMqConnectionRequestAllOf.prototype['port'] = undefined;
/**
 * The virtual host of the rabbitmq broker
 * @member {String} virtualHost
 */

CreateRabbitMqConnectionRequestAllOf.prototype['virtualHost'] = undefined;
/**
 * Broker endpoint
 * @member {String} uri
 */

CreateRabbitMqConnectionRequestAllOf.prototype['uri'] = undefined;
/**
 * Consumer username for authentication
 * @member {String} userName
 */

CreateRabbitMqConnectionRequestAllOf.prototype['userName'] = undefined;
/**
 * Consumer password for authentication
 * @member {String} password
 */

CreateRabbitMqConnectionRequestAllOf.prototype['password'] = undefined;
/**
 * Name of the queue
 * @member {String} queueName
 */

CreateRabbitMqConnectionRequestAllOf.prototype['queueName'] = undefined;
/**
 * Exchange to bind to
 * @member {String} exchange
 */

CreateRabbitMqConnectionRequestAllOf.prototype['exchange'] = undefined;
/**
 * Routing key to use
 * @member {String} routingKey
 */

CreateRabbitMqConnectionRequestAllOf.prototype['routingKey'] = undefined;
/**
 * Additional constraints.  Supported values:  - ssl  - durable  - exclusive  - autoDelete
 * @member {Array.<String>} addConstraints
 */

CreateRabbitMqConnectionRequestAllOf.prototype['addConstraints'] = undefined;
/**
 * @member {String} transformerId
 */

CreateRabbitMqConnectionRequestAllOf.prototype['transformerId'] = undefined;
var _default = CreateRabbitMqConnectionRequestAllOf;
exports["default"] = _default;