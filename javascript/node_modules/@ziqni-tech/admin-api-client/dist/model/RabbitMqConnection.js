"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

var _ModelDefault = _interopRequireDefault(require("./ModelDefault"));

var _OptParamModels = _interopRequireDefault(require("./OptParamModels"));

var _RabbitMqConnectionAllOf = _interopRequireDefault(require("./RabbitMqConnectionAllOf"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

/**
 * The RabbitMqConnection model module.
 * @module model/RabbitMqConnection
 * @version 0.0.26
 */
var RabbitMqConnection = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>RabbitMqConnection</code>.
   * @alias module:model/RabbitMqConnection
   * @implements module:model/ModelDefault
   * @implements module:model/OptParamModels
   * @implements module:model/RabbitMqConnectionAllOf
   * @param id {String} A unique system generated identifier
   * @param spaceName {String} This is the space name which is linked to the account
   * @param created {Date} ISO8601 timestamp for when a Model was created. All records are stored in UTC time zone
   * @param name {String} The name of the consumer
   * @param uri {String} The SQS endpoint.
   * @param virtualHost {String} The virtual host of the rabbitmq broker
   * @param port {Number} The port number on which consumer will connect on rabbitmq broker
   * @param userName {String} Consumer username for authentication
   * @param password {String} Consumer password for authentication
   * @param queueName {String} Name of the queue
   * @param lastKnownStatus {String} Last known status of the connection
   * @param lastKnownStatusCode {Number} Status code correspoding to the last known status
   * @param constraints {Array.<String>} Additional constraints
   * @param transformerId {String} The transformer to use, if empty the default system transformer will be used
   */
  function RabbitMqConnection(id, spaceName, created, name, uri, virtualHost, port, userName, password, queueName, lastKnownStatus, lastKnownStatusCode, constraints, transformerId) {
    _classCallCheck(this, RabbitMqConnection);

    _ModelDefault["default"].initialize(this, id, spaceName, created);

    _OptParamModels["default"].initialize(this);

    _RabbitMqConnectionAllOf["default"].initialize(this, name, uri, virtualHost, port, userName, password, queueName, lastKnownStatus, lastKnownStatusCode, constraints, transformerId);

    RabbitMqConnection.initialize(this, id, spaceName, created, name, uri, virtualHost, port, userName, password, queueName, lastKnownStatus, lastKnownStatusCode, constraints, transformerId);
  }
  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */


  _createClass(RabbitMqConnection, null, [{
    key: "initialize",
    value: function initialize(obj, id, spaceName, created, name, uri, virtualHost, port, userName, password, queueName, lastKnownStatus, lastKnownStatusCode, constraints, transformerId) {
      obj['id'] = id;
      obj['spaceName'] = spaceName;
      obj['created'] = created;
      obj['name'] = name;
      obj['uri'] = uri;
      obj['virtualHost'] = virtualHost;
      obj['port'] = port;
      obj['userName'] = userName;
      obj['password'] = password;
      obj['queueName'] = queueName;
      obj['lastKnownStatus'] = lastKnownStatus;
      obj['lastKnownStatusCode'] = lastKnownStatusCode;
      obj['constraints'] = constraints;
      obj['transformerId'] = transformerId;
    }
    /**
     * Constructs a <code>RabbitMqConnection</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RabbitMqConnection} obj Optional instance to populate.
     * @return {module:model/RabbitMqConnection} The populated <code>RabbitMqConnection</code> instance.
     */

  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new RabbitMqConnection();

        _ModelDefault["default"].constructFromObject(data, obj);

        _OptParamModels["default"].constructFromObject(data, obj);

        _RabbitMqConnectionAllOf["default"].constructFromObject(data, obj);

        if (data.hasOwnProperty('id')) {
          obj['id'] = _ApiClient["default"].convertToType(data['id'], 'String');
        }

        if (data.hasOwnProperty('spaceName')) {
          obj['spaceName'] = _ApiClient["default"].convertToType(data['spaceName'], 'String');
        }

        if (data.hasOwnProperty('created')) {
          obj['created'] = _ApiClient["default"].convertToType(data['created'], 'Date');
        }

        if (data.hasOwnProperty('customFields')) {
          obj['customFields'] = _ApiClient["default"].convertToType(data['customFields'], {
            'String': Object
          });
        }

        if (data.hasOwnProperty('tags')) {
          obj['tags'] = _ApiClient["default"].convertToType(data['tags'], ['String']);
        }

        if (data.hasOwnProperty('metadata')) {
          obj['metadata'] = _ApiClient["default"].convertToType(data['metadata'], {
            'String': 'String'
          });
        }

        if (data.hasOwnProperty('name')) {
          obj['name'] = _ApiClient["default"].convertToType(data['name'], 'String');
        }

        if (data.hasOwnProperty('description')) {
          obj['description'] = _ApiClient["default"].convertToType(data['description'], 'String');
        }

        if (data.hasOwnProperty('uri')) {
          obj['uri'] = _ApiClient["default"].convertToType(data['uri'], 'String');
        }

        if (data.hasOwnProperty('virtualHost')) {
          obj['virtualHost'] = _ApiClient["default"].convertToType(data['virtualHost'], 'String');
        }

        if (data.hasOwnProperty('port')) {
          obj['port'] = _ApiClient["default"].convertToType(data['port'], 'Number');
        }

        if (data.hasOwnProperty('userName')) {
          obj['userName'] = _ApiClient["default"].convertToType(data['userName'], 'String');
        }

        if (data.hasOwnProperty('password')) {
          obj['password'] = _ApiClient["default"].convertToType(data['password'], 'String');
        }

        if (data.hasOwnProperty('queueName')) {
          obj['queueName'] = _ApiClient["default"].convertToType(data['queueName'], 'String');
        }

        if (data.hasOwnProperty('exchange')) {
          obj['exchange'] = _ApiClient["default"].convertToType(data['exchange'], 'String');
        }

        if (data.hasOwnProperty('routingKey')) {
          obj['routingKey'] = _ApiClient["default"].convertToType(data['routingKey'], 'String');
        }

        if (data.hasOwnProperty('lastKnownStatus')) {
          obj['lastKnownStatus'] = _ApiClient["default"].convertToType(data['lastKnownStatus'], 'String');
        }

        if (data.hasOwnProperty('lastKnownStatusCode')) {
          obj['lastKnownStatusCode'] = _ApiClient["default"].convertToType(data['lastKnownStatusCode'], 'Number');
        }

        if (data.hasOwnProperty('constraints')) {
          obj['constraints'] = _ApiClient["default"].convertToType(data['constraints'], ['String']);
        }

        if (data.hasOwnProperty('transformerId')) {
          obj['transformerId'] = _ApiClient["default"].convertToType(data['transformerId'], 'String');
        }

        if (data.hasOwnProperty('connectionType')) {
          obj['connectionType'] = _ApiClient["default"].convertToType(data['connectionType'], 'String');
        }
      }

      return obj;
    }
  }]);

  return RabbitMqConnection;
}();
/**
 * A unique system generated identifier
 * @member {String} id
 */


RabbitMqConnection.prototype['id'] = undefined;
/**
 * This is the space name which is linked to the account
 * @member {String} spaceName
 */

RabbitMqConnection.prototype['spaceName'] = undefined;
/**
 * ISO8601 timestamp for when a Model was created. All records are stored in UTC time zone
 * @member {Date} created
 */

RabbitMqConnection.prototype['created'] = undefined;
/**
 * @member {Object.<String, Object>} customFields
 */

RabbitMqConnection.prototype['customFields'] = undefined;
/**
 * A list of id's used to tag models
 * @member {Array.<String>} tags
 */

RabbitMqConnection.prototype['tags'] = undefined;
/**
 * @member {Object.<String, String>} metadata
 */

RabbitMqConnection.prototype['metadata'] = undefined;
/**
 * The name of the consumer
 * @member {String} name
 */

RabbitMqConnection.prototype['name'] = undefined;
/**
 * The description of the consumer
 * @member {String} description
 */

RabbitMqConnection.prototype['description'] = undefined;
/**
 * The SQS endpoint.
 * @member {String} uri
 */

RabbitMqConnection.prototype['uri'] = undefined;
/**
 * The virtual host of the rabbitmq broker
 * @member {String} virtualHost
 */

RabbitMqConnection.prototype['virtualHost'] = undefined;
/**
 * The port number on which consumer will connect on rabbitmq broker
 * @member {Number} port
 */

RabbitMqConnection.prototype['port'] = undefined;
/**
 * Consumer username for authentication
 * @member {String} userName
 */

RabbitMqConnection.prototype['userName'] = undefined;
/**
 * Consumer password for authentication
 * @member {String} password
 */

RabbitMqConnection.prototype['password'] = undefined;
/**
 * Name of the queue
 * @member {String} queueName
 */

RabbitMqConnection.prototype['queueName'] = undefined;
/**
 * Exchange to connect to
 * @member {String} exchange
 */

RabbitMqConnection.prototype['exchange'] = undefined;
/**
 * Routing key to use
 * @member {String} routingKey
 */

RabbitMqConnection.prototype['routingKey'] = undefined;
/**
 * Last known status of the connection
 * @member {String} lastKnownStatus
 */

RabbitMqConnection.prototype['lastKnownStatus'] = undefined;
/**
 * Status code correspoding to the last known status
 * @member {Number} lastKnownStatusCode
 */

RabbitMqConnection.prototype['lastKnownStatusCode'] = undefined;
/**
 * Additional constraints
 * @member {Array.<String>} constraints
 */

RabbitMqConnection.prototype['constraints'] = undefined;
/**
 * The transformer to use, if empty the default system transformer will be used
 * @member {String} transformerId
 */

RabbitMqConnection.prototype['transformerId'] = undefined;
/**
 * The type of connection
 * @member {String} connectionType
 */

RabbitMqConnection.prototype['connectionType'] = undefined; // Implement ModelDefault interface:

/**
 * A unique system generated identifier
 * @member {String} id
 */

_ModelDefault["default"].prototype['id'] = undefined;
/**
 * This is the space name which is linked to the account
 * @member {String} spaceName
 */

_ModelDefault["default"].prototype['spaceName'] = undefined;
/**
 * ISO8601 timestamp for when a Model was created. All records are stored in UTC time zone
 * @member {Date} created
 */

_ModelDefault["default"].prototype['created'] = undefined; // Implement OptParamModels interface:

/**
 * @member {Object.<String, Object>} customFields
 */

_OptParamModels["default"].prototype['customFields'] = undefined;
/**
 * A list of id's used to tag models
 * @member {Array.<String>} tags
 */

_OptParamModels["default"].prototype['tags'] = undefined;
/**
 * @member {Object.<String, String>} metadata
 */

_OptParamModels["default"].prototype['metadata'] = undefined; // Implement RabbitMqConnectionAllOf interface:

/**
 * The name of the consumer
 * @member {String} name
 */

_RabbitMqConnectionAllOf["default"].prototype['name'] = undefined;
/**
 * The description of the consumer
 * @member {String} description
 */

_RabbitMqConnectionAllOf["default"].prototype['description'] = undefined;
/**
 * The SQS endpoint.
 * @member {String} uri
 */

_RabbitMqConnectionAllOf["default"].prototype['uri'] = undefined;
/**
 * The virtual host of the rabbitmq broker
 * @member {String} virtualHost
 */

_RabbitMqConnectionAllOf["default"].prototype['virtualHost'] = undefined;
/**
 * The port number on which consumer will connect on rabbitmq broker
 * @member {Number} port
 */

_RabbitMqConnectionAllOf["default"].prototype['port'] = undefined;
/**
 * Consumer username for authentication
 * @member {String} userName
 */

_RabbitMqConnectionAllOf["default"].prototype['userName'] = undefined;
/**
 * Consumer password for authentication
 * @member {String} password
 */

_RabbitMqConnectionAllOf["default"].prototype['password'] = undefined;
/**
 * Name of the queue
 * @member {String} queueName
 */

_RabbitMqConnectionAllOf["default"].prototype['queueName'] = undefined;
/**
 * Exchange to connect to
 * @member {String} exchange
 */

_RabbitMqConnectionAllOf["default"].prototype['exchange'] = undefined;
/**
 * Routing key to use
 * @member {String} routingKey
 */

_RabbitMqConnectionAllOf["default"].prototype['routingKey'] = undefined;
/**
 * Last known status of the connection
 * @member {String} lastKnownStatus
 */

_RabbitMqConnectionAllOf["default"].prototype['lastKnownStatus'] = undefined;
/**
 * Status code correspoding to the last known status
 * @member {Number} lastKnownStatusCode
 */

_RabbitMqConnectionAllOf["default"].prototype['lastKnownStatusCode'] = undefined;
/**
 * Additional constraints
 * @member {Array.<String>} constraints
 */

_RabbitMqConnectionAllOf["default"].prototype['constraints'] = undefined;
/**
 * The transformer to use, if empty the default system transformer will be used
 * @member {String} transformerId
 */

_RabbitMqConnectionAllOf["default"].prototype['transformerId'] = undefined;
/**
 * The type of connection
 * @member {String} connectionType
 */

_RabbitMqConnectionAllOf["default"].prototype['connectionType'] = undefined;
var _default = RabbitMqConnection;
exports["default"] = _default;