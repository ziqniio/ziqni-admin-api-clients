"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

var _ContestStatus = _interopRequireDefault(require("./ContestStatus"));

var _RewardReduced = _interopRequireDefault(require("./RewardReduced"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

/**
 * The ContestReducedAllOf model module.
 * @module model/ContestReducedAllOf
 * @version 0.0.26
 */
var ContestReducedAllOf = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>ContestReducedAllOf</code>.
   * @alias module:model/ContestReducedAllOf
   * @param competitionId {String} A unique identifier of a Competition
   * @param row {Number} The row number for displaying the Contest in a table
   * @param name {String} A name for the Contest. Can be translated
   * @param round {Number} To what round does the contest belong
   * @param groupStage {Number} Is used for more complex Competitions e.g. multi round competitions where round 1 group stage matched round 2
   * @param entrantsFromContest {Array.<String>} A list of Ziqni contest identifiers to allow contests chaining. When a Progression competition is active and you have a 2 round competition the first round has to reference the second round then this parameter becomes mandatory instead of Optional.
   * @param status {module:model/ContestStatus} 
   * @param statusCode {Number} The code of the contest
   * @param scheduledStartDate {Date} ISO8601 timestamp for when a Contest should start. All records are stored in UTC time zone
   * @param scheduledEndDate {Date} ISO8601 timestamp for when a Contest should end. All records are stored in UTC time zone
   */
  function ContestReducedAllOf(competitionId, row, name, round, groupStage, entrantsFromContest, status, statusCode, scheduledStartDate, scheduledEndDate) {
    _classCallCheck(this, ContestReducedAllOf);

    ContestReducedAllOf.initialize(this, competitionId, row, name, round, groupStage, entrantsFromContest, status, statusCode, scheduledStartDate, scheduledEndDate);
  }
  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */


  _createClass(ContestReducedAllOf, null, [{
    key: "initialize",
    value: function initialize(obj, competitionId, row, name, round, groupStage, entrantsFromContest, status, statusCode, scheduledStartDate, scheduledEndDate) {
      obj['competitionId'] = competitionId;
      obj['row'] = row;
      obj['name'] = name;
      obj['round'] = round;
      obj['groupStage'] = groupStage;
      obj['entrantsFromContest'] = entrantsFromContest;
      obj['status'] = status;
      obj['statusCode'] = statusCode;
      obj['scheduledStartDate'] = scheduledStartDate;
      obj['scheduledEndDate'] = scheduledEndDate;
    }
    /**
     * Constructs a <code>ContestReducedAllOf</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ContestReducedAllOf} obj Optional instance to populate.
     * @return {module:model/ContestReducedAllOf} The populated <code>ContestReducedAllOf</code> instance.
     */

  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new ContestReducedAllOf();

        if (data.hasOwnProperty('competitionId')) {
          obj['competitionId'] = _ApiClient["default"].convertToType(data['competitionId'], 'String');
        }

        if (data.hasOwnProperty('row')) {
          obj['row'] = _ApiClient["default"].convertToType(data['row'], 'Number');
        }

        if (data.hasOwnProperty('name')) {
          obj['name'] = _ApiClient["default"].convertToType(data['name'], 'String');
        }

        if (data.hasOwnProperty('round')) {
          obj['round'] = _ApiClient["default"].convertToType(data['round'], 'Number');
        }

        if (data.hasOwnProperty('groupStage')) {
          obj['groupStage'] = _ApiClient["default"].convertToType(data['groupStage'], 'Number');
        }

        if (data.hasOwnProperty('entrantsFromContest')) {
          obj['entrantsFromContest'] = _ApiClient["default"].convertToType(data['entrantsFromContest'], ['String']);
        }

        if (data.hasOwnProperty('status')) {
          obj['status'] = _ContestStatus["default"].constructFromObject(data['status']);
        }

        if (data.hasOwnProperty('statusCode')) {
          obj['statusCode'] = _ApiClient["default"].convertToType(data['statusCode'], 'Number');
        }

        if (data.hasOwnProperty('scheduledStartDate')) {
          obj['scheduledStartDate'] = _ApiClient["default"].convertToType(data['scheduledStartDate'], 'Date');
        }

        if (data.hasOwnProperty('scheduledEndDate')) {
          obj['scheduledEndDate'] = _ApiClient["default"].convertToType(data['scheduledEndDate'], 'Date');
        }

        if (data.hasOwnProperty('actualStartDate')) {
          obj['actualStartDate'] = _ApiClient["default"].convertToType(data['actualStartDate'], 'Date');
        }

        if (data.hasOwnProperty('actualEndDate')) {
          obj['actualEndDate'] = _ApiClient["default"].convertToType(data['actualEndDate'], 'Date');
        }

        if (data.hasOwnProperty('tags')) {
          obj['tags'] = _ApiClient["default"].convertToType(data['tags'], ['String']);
        }

        if (data.hasOwnProperty('rewards')) {
          obj['rewards'] = _ApiClient["default"].convertToType(data['rewards'], [_RewardReduced["default"]]);
        }
      }

      return obj;
    }
  }]);

  return ContestReducedAllOf;
}();
/**
 * A unique identifier of a Competition
 * @member {String} competitionId
 */


ContestReducedAllOf.prototype['competitionId'] = undefined;
/**
 * The row number for displaying the Contest in a table
 * @member {Number} row
 */

ContestReducedAllOf.prototype['row'] = undefined;
/**
 * A name for the Contest. Can be translated
 * @member {String} name
 */

ContestReducedAllOf.prototype['name'] = undefined;
/**
 * To what round does the contest belong
 * @member {Number} round
 */

ContestReducedAllOf.prototype['round'] = undefined;
/**
 * Is used for more complex Competitions e.g. multi round competitions where round 1 group stage matched round 2
 * @member {Number} groupStage
 */

ContestReducedAllOf.prototype['groupStage'] = undefined;
/**
 * A list of Ziqni contest identifiers to allow contests chaining. When a Progression competition is active and you have a 2 round competition the first round has to reference the second round then this parameter becomes mandatory instead of Optional.
 * @member {Array.<String>} entrantsFromContest
 */

ContestReducedAllOf.prototype['entrantsFromContest'] = undefined;
/**
 * @member {module:model/ContestStatus} status
 */

ContestReducedAllOf.prototype['status'] = undefined;
/**
 * The code of the contest
 * @member {Number} statusCode
 */

ContestReducedAllOf.prototype['statusCode'] = undefined;
/**
 * ISO8601 timestamp for when a Contest should start. All records are stored in UTC time zone
 * @member {Date} scheduledStartDate
 */

ContestReducedAllOf.prototype['scheduledStartDate'] = undefined;
/**
 * ISO8601 timestamp for when a Contest should end. All records are stored in UTC time zone
 * @member {Date} scheduledEndDate
 */

ContestReducedAllOf.prototype['scheduledEndDate'] = undefined;
/**
 * ISO8601 timestamp for when a Contest started. All records are stored in UTC time zone
 * @member {Date} actualStartDate
 */

ContestReducedAllOf.prototype['actualStartDate'] = undefined;
/**
 * ISO8601 timestamp for when a Contest ended. All records are stored in UTC time zone
 * @member {Date} actualEndDate
 */

ContestReducedAllOf.prototype['actualEndDate'] = undefined;
/**
 * A list of id's used to tag
 * @member {Array.<String>} tags
 */

ContestReducedAllOf.prototype['tags'] = undefined;
/**
 * @member {Array.<module:model/RewardReduced>} rewards
 */

ContestReducedAllOf.prototype['rewards'] = undefined;
var _default = ContestReducedAllOf;
exports["default"] = _default;