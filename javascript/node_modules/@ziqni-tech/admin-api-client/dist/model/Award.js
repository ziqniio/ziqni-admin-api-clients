"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

var _AwardAllOf = _interopRequireDefault(require("./AwardAllOf"));

var _EntityType = _interopRequireDefault(require("./EntityType"));

var _ModelDefault = _interopRequireDefault(require("./ModelDefault"));

var _RewardTypeReduced = _interopRequireDefault(require("./RewardTypeReduced"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

/**
 * The Award model module.
 * @module model/Award
 * @version 0.0.26
 */
var Award = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>Award</code>.
   * @alias module:model/Award
   * @implements module:model/ModelDefault
   * @implements module:model/AwardAllOf
   * @param id {String} A unique system generated identifier
   * @param spaceName {String} This is the space name which is linked to the account
   * @param created {Date} ISO8601 timestamp for when a Model was created. All records are stored in UTC time zone
   * @param memberId {String} A unique identifier of a Member
   * @param rewardId {String} A unique identifier of a Reward
   * @param rewardType {module:model/RewardTypeReduced} 
   * @param rewardRank {String} If used in the context of contest this will associate with the rank of the leaderboard
   * @param rewardValue {Number} Numerical value of the reward that will be issued based on the reward type
   * @param entityType {module:model/EntityType} 
   * @param entityId {String} The Id of the contest or achievement related to this Award. Dependant on entityType
   * @param constraints {Array.<String>} Additional constraints, if the value is present it means the
   */
  function Award(id, spaceName, created, memberId, rewardId, rewardType, rewardRank, rewardValue, entityType, entityId, constraints) {
    _classCallCheck(this, Award);

    _ModelDefault["default"].initialize(this, id, spaceName, created);

    _AwardAllOf["default"].initialize(this, memberId, rewardId, rewardType, rewardRank, rewardValue, entityType, entityId, constraints);

    Award.initialize(this, id, spaceName, created, memberId, rewardId, rewardType, rewardRank, rewardValue, entityType, entityId, constraints);
  }
  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */


  _createClass(Award, null, [{
    key: "initialize",
    value: function initialize(obj, id, spaceName, created, memberId, rewardId, rewardType, rewardRank, rewardValue, entityType, entityId, constraints) {
      obj['id'] = id;
      obj['spaceName'] = spaceName;
      obj['created'] = created;
      obj['memberId'] = memberId;
      obj['rewardId'] = rewardId;
      obj['rewardType'] = rewardType;
      obj['rewardRank'] = rewardRank;
      obj['rewardValue'] = rewardValue;
      obj['entityType'] = entityType;
      obj['entityId'] = entityId;
      obj['constraints'] = constraints;
    }
    /**
     * Constructs a <code>Award</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Award} obj Optional instance to populate.
     * @return {module:model/Award} The populated <code>Award</code> instance.
     */

  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new Award();

        _ModelDefault["default"].constructFromObject(data, obj);

        _AwardAllOf["default"].constructFromObject(data, obj);

        if (data.hasOwnProperty('id')) {
          obj['id'] = _ApiClient["default"].convertToType(data['id'], 'String');
        }

        if (data.hasOwnProperty('spaceName')) {
          obj['spaceName'] = _ApiClient["default"].convertToType(data['spaceName'], 'String');
        }

        if (data.hasOwnProperty('created')) {
          obj['created'] = _ApiClient["default"].convertToType(data['created'], 'Date');
        }

        if (data.hasOwnProperty('memberId')) {
          obj['memberId'] = _ApiClient["default"].convertToType(data['memberId'], 'String');
        }

        if (data.hasOwnProperty('rewardId')) {
          obj['rewardId'] = _ApiClient["default"].convertToType(data['rewardId'], 'String');
        }

        if (data.hasOwnProperty('rewardType')) {
          obj['rewardType'] = _RewardTypeReduced["default"].constructFromObject(data['rewardType']);
        }

        if (data.hasOwnProperty('rewardRank')) {
          obj['rewardRank'] = _ApiClient["default"].convertToType(data['rewardRank'], 'String');
        }

        if (data.hasOwnProperty('rewardValue')) {
          obj['rewardValue'] = _ApiClient["default"].convertToType(data['rewardValue'], 'Number');
        }

        if (data.hasOwnProperty('delay')) {
          obj['delay'] = _ApiClient["default"].convertToType(data['delay'], 'Number');
        }

        if (data.hasOwnProperty('entityType')) {
          obj['entityType'] = _EntityType["default"].constructFromObject(data['entityType']);
        }

        if (data.hasOwnProperty('entityId')) {
          obj['entityId'] = _ApiClient["default"].convertToType(data['entityId'], 'String');
        }

        if (data.hasOwnProperty('pointInTime')) {
          obj['pointInTime'] = _ApiClient["default"].convertToType(data['pointInTime'], 'Date');
        }

        if (data.hasOwnProperty('period')) {
          obj['period'] = _ApiClient["default"].convertToType(data['period'], 'Number');
        }

        if (data.hasOwnProperty('tags')) {
          obj['tags'] = _ApiClient["default"].convertToType(data['tags'], ['String']);
        }

        if (data.hasOwnProperty('metadata')) {
          obj['metadata'] = _ApiClient["default"].convertToType(data['metadata'], {
            'String': 'String'
          });
        }

        if (data.hasOwnProperty('constraints')) {
          obj['constraints'] = _ApiClient["default"].convertToType(data['constraints'], ['String']);
        }

        if (data.hasOwnProperty('claimedTimestamp')) {
          obj['claimedTimestamp'] = _ApiClient["default"].convertToType(data['claimedTimestamp'], 'Date');
        }
      }

      return obj;
    }
  }]);

  return Award;
}();
/**
 * A unique system generated identifier
 * @member {String} id
 */


Award.prototype['id'] = undefined;
/**
 * This is the space name which is linked to the account
 * @member {String} spaceName
 */

Award.prototype['spaceName'] = undefined;
/**
 * ISO8601 timestamp for when a Model was created. All records are stored in UTC time zone
 * @member {Date} created
 */

Award.prototype['created'] = undefined;
/**
 * A unique identifier of a Member
 * @member {String} memberId
 */

Award.prototype['memberId'] = undefined;
/**
 * A unique identifier of a Reward
 * @member {String} rewardId
 */

Award.prototype['rewardId'] = undefined;
/**
 * @member {module:model/RewardTypeReduced} rewardType
 */

Award.prototype['rewardType'] = undefined;
/**
 * If used in the context of contest this will associate with the rank of the leaderboard
 * @member {String} rewardRank
 */

Award.prototype['rewardRank'] = undefined;
/**
 * Numerical value of the reward that will be issued based on the reward type
 * @member {Number} rewardValue
 */

Award.prototype['rewardValue'] = undefined;
/**
 * Delay of issuing a reward in minutes
 * @member {Number} delay
 */

Award.prototype['delay'] = undefined;
/**
 * @member {module:model/EntityType} entityType
 */

Award.prototype['entityType'] = undefined;
/**
 * The Id of the contest or achievement related to this Award. Dependant on entityType
 * @member {String} entityId
 */

Award.prototype['entityId'] = undefined;
/**
 * ISO8601 timestamp for when an Award is available until a specific point in time. All records are stored in UTC time zone. * There can only be one time definition used for claim period either \"pointInTime\" or \"period\"
 * @member {Date} pointInTime
 */

Award.prototype['pointInTime'] = undefined;
/**
 * Claimable duration in minutes, this value will set the controls until when the award is claimable. * There can only be one time definition used for claim period either \"pointInTime\" or \"period\"
 * @member {Number} period
 */

Award.prototype['period'] = undefined;
/**
 * A list of Strings of groups that the reward belongs to.
 * @member {Array.<String>} tags
 */

Award.prototype['tags'] = undefined;
/**
 * @member {Object.<String, String>} metadata
 */

Award.prototype['metadata'] = undefined;
/**
 * Additional constraints, if the value is present it means the
 * @member {Array.<String>} constraints
 */

Award.prototype['constraints'] = undefined;
/**
 * ISO8601 timestamp for when an Award is claimed. All records are stored in UTC time zone. *
 * @member {Date} claimedTimestamp
 */

Award.prototype['claimedTimestamp'] = undefined; // Implement ModelDefault interface:

/**
 * A unique system generated identifier
 * @member {String} id
 */

_ModelDefault["default"].prototype['id'] = undefined;
/**
 * This is the space name which is linked to the account
 * @member {String} spaceName
 */

_ModelDefault["default"].prototype['spaceName'] = undefined;
/**
 * ISO8601 timestamp for when a Model was created. All records are stored in UTC time zone
 * @member {Date} created
 */

_ModelDefault["default"].prototype['created'] = undefined; // Implement AwardAllOf interface:

/**
 * A unique identifier of a Member
 * @member {String} memberId
 */

_AwardAllOf["default"].prototype['memberId'] = undefined;
/**
 * A unique identifier of a Reward
 * @member {String} rewardId
 */

_AwardAllOf["default"].prototype['rewardId'] = undefined;
/**
 * @member {module:model/RewardTypeReduced} rewardType
 */

_AwardAllOf["default"].prototype['rewardType'] = undefined;
/**
 * If used in the context of contest this will associate with the rank of the leaderboard
 * @member {String} rewardRank
 */

_AwardAllOf["default"].prototype['rewardRank'] = undefined;
/**
 * Numerical value of the reward that will be issued based on the reward type
 * @member {Number} rewardValue
 */

_AwardAllOf["default"].prototype['rewardValue'] = undefined;
/**
 * Delay of issuing a reward in minutes
 * @member {Number} delay
 */

_AwardAllOf["default"].prototype['delay'] = undefined;
/**
 * @member {module:model/EntityType} entityType
 */

_AwardAllOf["default"].prototype['entityType'] = undefined;
/**
 * The Id of the contest or achievement related to this Award. Dependant on entityType
 * @member {String} entityId
 */

_AwardAllOf["default"].prototype['entityId'] = undefined;
/**
 * ISO8601 timestamp for when an Award is available until a specific point in time. All records are stored in UTC time zone. * There can only be one time definition used for claim period either \"pointInTime\" or \"period\"
 * @member {Date} pointInTime
 */

_AwardAllOf["default"].prototype['pointInTime'] = undefined;
/**
 * Claimable duration in minutes, this value will set the controls until when the award is claimable. * There can only be one time definition used for claim period either \"pointInTime\" or \"period\"
 * @member {Number} period
 */

_AwardAllOf["default"].prototype['period'] = undefined;
/**
 * A list of Strings of groups that the reward belongs to.
 * @member {Array.<String>} tags
 */

_AwardAllOf["default"].prototype['tags'] = undefined;
/**
 * @member {Object.<String, String>} metadata
 */

_AwardAllOf["default"].prototype['metadata'] = undefined;
/**
 * Additional constraints, if the value is present it means the
 * @member {Array.<String>} constraints
 */

_AwardAllOf["default"].prototype['constraints'] = undefined;
/**
 * ISO8601 timestamp for when an Award is claimed. All records are stored in UTC time zone. *
 * @member {Date} claimedTimestamp
 */

_AwardAllOf["default"].prototype['claimedTimestamp'] = undefined;
var _default = Award;
exports["default"] = _default;