"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

var _RuleRoutine = _interopRequireDefault(require("./RuleRoutine"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

/**
 * The RuleExpression model module.
 * @module model/RuleExpression
 * @version 0.0.26
 */
var RuleExpression = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>RuleExpression</code>.
   * A conditional expressions is an element that declares either a rule expression, condition or routine to be evaluated or executed
   * @alias module:model/RuleExpression
   * @param type {String} condition or expression or routine
   */
  function RuleExpression(type) {
    _classCallCheck(this, RuleExpression);

    RuleExpression.initialize(this, type);
  }
  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */


  _createClass(RuleExpression, null, [{
    key: "initialize",
    value: function initialize(obj, type) {
      obj['type'] = type;
    }
    /**
     * Constructs a <code>RuleExpression</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RuleExpression} obj Optional instance to populate.
     * @return {module:model/RuleExpression} The populated <code>RuleExpression</code> instance.
     */

  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new RuleExpression();

        if (data.hasOwnProperty('type')) {
          obj['type'] = _ApiClient["default"].convertToType(data['type'], 'String');
        }

        if (data.hasOwnProperty('mustMatchAll')) {
          obj['mustMatchAll'] = _ApiClient["default"].convertToType(data['mustMatchAll'], 'Boolean');
        }

        if (data.hasOwnProperty('mustEvaluateTo')) {
          obj['mustEvaluateTo'] = _ApiClient["default"].convertToType(data['mustEvaluateTo'], 'Boolean');
        }

        if (data.hasOwnProperty('scope')) {
          obj['scope'] = _ApiClient["default"].convertToType(data['scope'], 'String');
        }

        if (data.hasOwnProperty('operand')) {
          obj['operand'] = _ApiClient["default"].convertToType(data['operand'], 'String');
        }

        if (data.hasOwnProperty('operator')) {
          obj['operator'] = _ApiClient["default"].convertToType(data['operator'], 'String');
        }

        if (data.hasOwnProperty('value')) {
          obj['value'] = _ApiClient["default"].convertToType(data['value'], 'String');
        }

        if (data.hasOwnProperty('rules')) {
          obj['rules'] = _ApiClient["default"].convertToType(data['rules'], [RuleExpression]);
        }

        if (data.hasOwnProperty('then')) {
          obj['then'] = _ApiClient["default"].convertToType(data['then'], [_RuleRoutine["default"]]);
        }

        if (data.hasOwnProperty('lineNumber')) {
          obj['lineNumber'] = _ApiClient["default"].convertToType(data['lineNumber'], 'Number');
        }
      }

      return obj;
    }
  }]);

  return RuleExpression;
}();
/**
 * condition or expression or routine
 * @member {String} type
 */


RuleExpression.prototype['type'] = undefined;
/**
 * All expressions in the condition must either evaluate to TRUE or FALSE if set to TRUE
 * @member {Boolean} mustMatchAll
 */

RuleExpression.prototype['mustMatchAll'] = undefined;
/**
 * All the expressions of this condition must either evaluate to TRUE or FALSE
 * @member {Boolean} mustEvaluateTo
 */

RuleExpression.prototype['mustEvaluateTo'] = undefined;
/**
 * The scope of the operand used in the expression
 * @member {String} scope
 */

RuleExpression.prototype['scope'] = undefined;
/**
 * The order the rules have to be executed in.
 * @member {String} operand
 */

RuleExpression.prototype['operand'] = undefined;
/**
 * [ *.* ] or [ .* ] or [ == ] or [ > ] or [ >= ] or [ <=]  or [ < ] or [ <> ]
 * @member {String} operator
 */

RuleExpression.prototype['operator'] = undefined;
/**
 * The value associated with the expression
 * @member {String} value
 */

RuleExpression.prototype['value'] = undefined;
/**
 * @member {Array.<module:model/RuleExpression>} rules
 */

RuleExpression.prototype['rules'] = undefined;
/**
 * @member {Array.<module:model/RuleRoutine>} then
 */

RuleExpression.prototype['then'] = undefined;
/**
 * @member {Number} lineNumber
 */

RuleExpression.prototype['lineNumber'] = undefined;
var _default = RuleExpression;
exports["default"] = _default;