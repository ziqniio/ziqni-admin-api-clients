"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

var _ApiResponse = _interopRequireDefault(require("../model/ApiResponse"));

var _BracketResponse = _interopRequireDefault(require("../model/BracketResponse"));

var _CloneCompetitionResponse = _interopRequireDefault(require("../model/CloneCompetitionResponse"));

var _CompetitionLeaderboardResponse = _interopRequireDefault(require("../model/CompetitionLeaderboardResponse"));

var _CompetitionResponse = _interopRequireDefault(require("../model/CompetitionResponse"));

var _ContestReducedResponse = _interopRequireDefault(require("../model/ContestReducedResponse"));

var _CreateCompetitionRequest = _interopRequireDefault(require("../model/CreateCompetitionRequest"));

var _CreateSimpleCompetitionRequest = _interopRequireDefault(require("../model/CreateSimpleCompetitionRequest"));

var _EntrantRequest = _interopRequireDefault(require("../model/EntrantRequest"));

var _EntrantResponse = _interopRequireDefault(require("../model/EntrantResponse"));

var _QueryRequest = _interopRequireDefault(require("../model/QueryRequest"));

var _UpdateCompetitionRequest = _interopRequireDefault(require("../model/UpdateCompetitionRequest"));

var _UpdateCompetitionStatusRequest = _interopRequireDefault(require("../model/UpdateCompetitionStatusRequest"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

/**
* Competitions service.
* @module api/CompetitionsApi
* @version 0.0.26
*/
var CompetitionsApi = /*#__PURE__*/function () {
  /**
  * Constructs a new CompetitionsApi. 
  * @alias module:api/CompetitionsApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function CompetitionsApi(apiClient) {
    _classCallCheck(this, CompetitionsApi);

    this.apiClient = apiClient || _ApiClient["default"].instance;
  }
  /**
   * Callback function to receive the result of the createCompetitions operation.
   * @callback module:api/CompetitionsApi~createCompetitionsCallback
   * @param {String} error Error message, if any.
   * @param {module:model/ApiResponse} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Create a new Competition in the Ziqni database
   * @param {module:model/CreateCompetitionRequest} body Create a Competition in the Ziqni database
   * @param {module:api/CompetitionsApi~createCompetitionsCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/ApiResponse}
   */


  _createClass(CompetitionsApi, [{
    key: "createCompetitions",
    value: function createCompetitions(body, callback) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createCompetitions");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _ApiResponse["default"];
      return this.apiClient.callApi('/competitions', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the createSimpleCompetitions operation.
     * @callback module:api/CompetitionsApi~createSimpleCompetitionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Simple Competition in the Ziqni database
     * @param {module:model/CreateSimpleCompetitionRequest} body Create a Competition in the Ziqni database
     * @param {module:api/CompetitionsApi~createSimpleCompetitionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponse}
     */

  }, {
    key: "createSimpleCompetitions",
    value: function createSimpleCompetitions(body, callback) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createSimpleCompetitions");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _ApiResponse["default"];
      return this.apiClient.callApi('/competitions/simple', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the getCompetitions operation.
     * @callback module:api/CompetitionsApi~getCompetitionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CompetitionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of Competitions. This assumes that competitions have first been uploaded via a POST request or web console
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.id The unique identifiers of the resources
     * @param {Number} opts.limit Limit the returned total records found
     * @param {Number} opts.skip Skip the returned records found and return the next batch of records
     * @param {module:api/CompetitionsApi~getCompetitionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CompetitionResponse}
     */

  }, {
    key: "getCompetitions",
    value: function getCompetitions(opts, callback) {
      opts = opts || {};
      var postBody = null;
      var pathParams = {};
      var queryParams = {
        'id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        '_limit': opts['limit'],
        '_skip': opts['skip']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _CompetitionResponse["default"];
      return this.apiClient.callApi('/competitions', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the getCompetitionsBrackets operation.
     * @callback module:api/CompetitionsApi~getCompetitionsBracketsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BracketResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * NOT AVAILABLE IN CURRENT RELEASE
     * Returns all Contests for the Competition id provided in Brackets
     * @param {String} id Unique identifier of the resource
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Limit the returned total records found
     * @param {Number} opts.skip Skip the returned records found and return the next batch of records
     * @param {module:api/CompetitionsApi~getCompetitionsBracketsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BracketResponse}
     */

  }, {
    key: "getCompetitionsBrackets",
    value: function getCompetitionsBrackets(id, opts, callback) {
      opts = opts || {};
      var postBody = null; // verify the required parameter 'id' is set

      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCompetitionsBrackets");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        '_limit': opts['limit'],
        '_skip': opts['skip']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _BracketResponse["default"];
      return this.apiClient.callApi('/competitions/{id}/brackets', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the getCompetitionsByQuery operation.
     * @callback module:api/CompetitionsApi~getCompetitionsByQueryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CompetitionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Competitions from Ziqni database by unique Competition ID's or any other POST body parameters using the POST method
     * @param {Object} opts Optional parameters
     * @param {module:model/QueryRequest} opts.body Retrieve Competitions from Ziqni database by unique Competition ID's or any other POST body parameters using the POST method
     * @param {module:api/CompetitionsApi~getCompetitionsByQueryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CompetitionResponse}
     */

  }, {
    key: "getCompetitionsByQuery",
    value: function getCompetitionsByQuery(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _CompetitionResponse["default"];
      return this.apiClient.callApi('/competitions/query', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the getCompetitionsToClone operation.
     * @callback module:api/CompetitionsApi~getCompetitionsToCloneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CloneCompetitionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * NOT AVAILABLE IN CURRENT RELEASE
     * Clones a Competition for the identifier provided
     * @param {String} id Unique identifier of the resource
     * @param {module:api/CompetitionsApi~getCompetitionsToCloneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CloneCompetitionResponse}
     */

  }, {
    key: "getCompetitionsToClone",
    value: function getCompetitionsToClone(id, callback) {
      var postBody = null; // verify the required parameter 'id' is set

      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCompetitionsToClone");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _CloneCompetitionResponse["default"];
      return this.apiClient.callApi('/competitions/{id}/clone', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the getContestsForCompetitions operation.
     * @callback module:api/CompetitionsApi~getContestsForCompetitionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContestReducedResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * NOT AVAILABLE IN CURRENT RELEASE
     * Returns all Contests for the Competition id provided
     * @param {String} id Unique identifier of the resource
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Limit the returned total records found
     * @param {Number} opts.skip Skip the returned records found and return the next batch of records
     * @param {module:api/CompetitionsApi~getContestsForCompetitionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContestReducedResponse}
     */

  }, {
    key: "getContestsForCompetitions",
    value: function getContestsForCompetitions(id, opts, callback) {
      opts = opts || {};
      var postBody = null; // verify the required parameter 'id' is set

      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getContestsForCompetitions");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        '_limit': opts['limit'],
        '_skip': opts['skip']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ContestReducedResponse["default"];
      return this.apiClient.callApi('/competitions/{id}/contests', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the getLeaderboardByCompetitionId operation.
     * @callback module:api/CompetitionsApi~getLeaderboardByCompetitionIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CompetitionLeaderboardResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * NOT AVAILABLE IN CURRENT RELEASE
     * Returns a list of Leaderborads for the Competition id provided
     * @param {String} id Unique identifier of the resource
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Limit the returned total records found
     * @param {Number} opts.skip Skip the returned records found and return the next batch of records
     * @param {module:api/CompetitionsApi~getLeaderboardByCompetitionIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CompetitionLeaderboardResponse}
     */

  }, {
    key: "getLeaderboardByCompetitionId",
    value: function getLeaderboardByCompetitionId(id, opts, callback) {
      opts = opts || {};
      var postBody = null; // verify the required parameter 'id' is set

      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getLeaderboardByCompetitionId");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        '_limit': opts['limit'],
        '_skip': opts['skip']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _CompetitionLeaderboardResponse["default"];
      return this.apiClient.callApi('/competitions/{id}/leaderboard', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the getListOfEntrants operation.
     * @callback module:api/CompetitionsApi~getListOfEntrantsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EntrantResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * NOT AVAILABLE IN CURRENT RELEASE
     * Returns all Entries for the Competition id provided
     * @param {String} id Unique identifier of the resource
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Limit the returned total records found
     * @param {Number} opts.skip Skip the returned records found and return the next batch of records
     * @param {module:api/CompetitionsApi~getListOfEntrantsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EntrantResponse}
     */

  }, {
    key: "getListOfEntrants",
    value: function getListOfEntrants(id, opts, callback) {
      opts = opts || {};
      var postBody = null; // verify the required parameter 'id' is set

      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getListOfEntrants");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        '_limit': opts['limit'],
        '_skip': opts['skip']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _EntrantResponse["default"];
      return this.apiClient.callApi('/competitions/{id}/entries', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the updateCompetitions operation.
     * @callback module:api/CompetitionsApi~updateCompetitionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing Competition in the Ziqni database
     * @param {module:model/UpdateCompetitionRequest} body Update a Competition in the Ziqni database. * A Competitions Id must exist in the Ziqni database for update
     * @param {module:api/CompetitionsApi~updateCompetitionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponse}
     */

  }, {
    key: "updateCompetitions",
    value: function updateCompetitions(body, callback) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateCompetitions");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _ApiResponse["default"];
      return this.apiClient.callApi('/competitions', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the updateCompetitionsEntries operation.
     * @callback module:api/CompetitionsApi~updateCompetitionsEntriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * NOT AVAILABLE IN CURRENT RELEASE
     * Updates the status of the Entrants for a Competition id provided
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/EntrantRequest>} opts.body Updates the status of the Entrants
     * @param {module:api/CompetitionsApi~updateCompetitionsEntriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponse}
     */

  }, {
    key: "updateCompetitionsEntries",
    value: function updateCompetitionsEntries(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _ApiResponse["default"];
      return this.apiClient.callApi('/competitions/entries', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the updateCompetitionsState operation.
     * @callback module:api/CompetitionsApi~updateCompetitionsStateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * NOT AVAILABLE IN CURRENT RELEASE
     * Manages the Competitions state
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/UpdateCompetitionStatusRequest>} opts.body Updates the state of the Competition
     * @param {module:api/CompetitionsApi~updateCompetitionsStateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponse}
     */

  }, {
    key: "updateCompetitionsState",
    value: function updateCompetitionsState(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _ApiResponse["default"];
      return this.apiClient.callApi('/competitions/state', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
  }]);

  return CompetitionsApi;
}();

exports["default"] = CompetitionsApi;