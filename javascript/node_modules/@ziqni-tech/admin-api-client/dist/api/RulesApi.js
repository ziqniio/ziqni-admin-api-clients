"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

var _ApiResponse = _interopRequireDefault(require("../model/ApiResponse"));

var _QueryRequest = _interopRequireDefault(require("../model/QueryRequest"));

var _Response = _interopRequireDefault(require("../model/Response"));

var _RuleOperandLookupRequest = _interopRequireDefault(require("../model/RuleOperandLookupRequest"));

var _RuleOperandLookupResponse = _interopRequireDefault(require("../model/RuleOperandLookupResponse"));

var _RuleResponse = _interopRequireDefault(require("../model/RuleResponse"));

var _UpdateRuleRequest = _interopRequireDefault(require("../model/UpdateRuleRequest"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

/**
* Rules service.
* @module api/RulesApi
* @version 0.0.26
*/
var RulesApi = /*#__PURE__*/function () {
  /**
  * Constructs a new RulesApi. 
  * @alias module:api/RulesApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function RulesApi(apiClient) {
    _classCallCheck(this, RulesApi);

    this.apiClient = apiClient || _ApiClient["default"].instance;
  }
  /**
   * Callback function to receive the result of the deleteRulesByQuery operation.
   * @callback module:api/RulesApi~deleteRulesByQueryCallback
   * @param {String} error Error message, if any.
   * @param {module:model/ApiResponse} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * NOT AVAILABLE IN CURRENT RELEASE
   * Delete Rules from Ziqni database by unique Rules ID's or any other POST body parameters using the POST method
   * @param {Object} opts Optional parameters
   * @param {module:model/QueryRequest} opts.body Delete Rules from Ziqni database by unique Rules ID's or any other POST body parameters using the POST method
   * @param {module:api/RulesApi~deleteRulesByQueryCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/ApiResponse}
   */


  _createClass(RulesApi, [{
    key: "deleteRulesByQuery",
    value: function deleteRulesByQuery(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _ApiResponse["default"];
      return this.apiClient.callApi('/rules/delete', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the getRuleSchemas operation.
     * @callback module:api/RulesApi~getRuleSchemasCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of rules. This assumes that rules have first been created during achievement, competition or contest setup
     * @param {String} context The context to retrieve, either achievement, competition or contest
     * @param {module:api/RulesApi~getRuleSchemasCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Response}
     */

  }, {
    key: "getRuleSchemas",
    value: function getRuleSchemas(context, callback) {
      var postBody = null; // verify the required parameter 'context' is set

      if (context === undefined || context === null) {
        throw new Error("Missing the required parameter 'context' when calling getRuleSchemas");
      }

      var pathParams = {};
      var queryParams = {
        'context': context
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _Response["default"];
      return this.apiClient.callApi('/rules/schema', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the getRules operation.
     * @callback module:api/RulesApi~getRulesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RuleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of rules. This assumes that rules have first been created during achievement, competition or contest setup. The id is the ID of the entity the rules describe
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.id The unique identifiers of the resources
     * @param {Number} opts.limit Limit the returned total records found
     * @param {Number} opts.skip Skip the returned records found and return the next batch of records
     * @param {module:api/RulesApi~getRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RuleResponse}
     */

  }, {
    key: "getRules",
    value: function getRules(opts, callback) {
      opts = opts || {};
      var postBody = null;
      var pathParams = {};
      var queryParams = {
        'id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        '_limit': opts['limit'],
        '_skip': opts['skip']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _RuleResponse["default"];
      return this.apiClient.callApi('/rules', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the getRulesByQuery operation.
     * @callback module:api/RulesApi~getRulesByQueryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RuleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Rules from Ziqni database by unique Rewards ID's or any other POST body parameters using the POST method
     * @param {Object} opts Optional parameters
     * @param {module:model/QueryRequest} opts.body Retrieve Rules from Ziqni database by unique Rewards ID's or any other Post body parameters using the POST method
     * @param {module:api/RulesApi~getRulesByQueryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RuleResponse}
     */

  }, {
    key: "getRulesByQuery",
    value: function getRulesByQuery(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _RuleResponse["default"];
      return this.apiClient.callApi('/rules/query', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the lookupOperandsRules operation.
     * @callback module:api/RulesApi~lookupOperandsRulesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RuleOperandLookupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search or get rule operand values
     * @param {Array.<module:model/RuleOperandLookupRequest>} body Search for operand values and human readable text options
     * @param {module:api/RulesApi~lookupOperandsRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RuleOperandLookupResponse}
     */

  }, {
    key: "lookupOperandsRules",
    value: function lookupOperandsRules(body, callback) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling lookupOperandsRules");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _RuleOperandLookupResponse["default"];
      return this.apiClient.callApi('/rules/operand-lookup', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the updateRules operation.
     * @callback module:api/RulesApi~updateRulesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update existing rules
     * @param {Array.<module:model/UpdateRuleRequest>} body Update rules for a given Achievement, Competition or Contest identifier.
     * @param {module:api/RulesApi~updateRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponse}
     */

  }, {
    key: "updateRules",
    value: function updateRules(body, callback) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateRules");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _ApiResponse["default"];
      return this.apiClient.callApi('/rules', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the validateRules operation.
     * @callback module:api/RulesApi~validateRulesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Validate rules
     * @param {Array.<module:model/UpdateRuleRequest>} body Validate rules
     * @param {module:api/RulesApi~validateRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponse}
     */

  }, {
    key: "validateRules",
    value: function validateRules(body, callback) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling validateRules");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _ApiResponse["default"];
      return this.apiClient.callApi('/rules/validate', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
  }]);

  return RulesApi;
}();

exports["default"] = RulesApi;