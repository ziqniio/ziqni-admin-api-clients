"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

var _ApiResponse = _interopRequireDefault(require("../model/ApiResponse"));

var _CollaboratorResponse = _interopRequireDefault(require("../model/CollaboratorResponse"));

var _CollaboratorRolesResponse = _interopRequireDefault(require("../model/CollaboratorRolesResponse"));

var _CreateCollaboratorRequest = _interopRequireDefault(require("../model/CreateCollaboratorRequest"));

var _QueryRequest = _interopRequireDefault(require("../model/QueryRequest"));

var _UpdateCollaboratorRequest = _interopRequireDefault(require("../model/UpdateCollaboratorRequest"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

/**
* Collaborators service.
* @module api/CollaboratorsApi
* @version 0.0.26
*/
var CollaboratorsApi = /*#__PURE__*/function () {
  /**
  * Constructs a new CollaboratorsApi. 
  * @alias module:api/CollaboratorsApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function CollaboratorsApi(apiClient) {
    _classCallCheck(this, CollaboratorsApi);

    this.apiClient = apiClient || _ApiClient["default"].instance;
  }
  /**
   * Callback function to receive the result of the createCollaborators operation.
   * @callback module:api/CollaboratorsApi~createCollaboratorsCallback
   * @param {String} error Error message, if any.
   * @param {module:model/ApiResponse} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Create a new Collaborator in the Ziqni
   * @param {Array.<module:model/CreateCollaboratorRequest>} body Create a Collaborator in the Ziqni system
   * @param {module:api/CollaboratorsApi~createCollaboratorsCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/ApiResponse}
   */


  _createClass(CollaboratorsApi, [{
    key: "createCollaborators",
    value: function createCollaborators(body, callback) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createCollaborators");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _ApiResponse["default"];
      return this.apiClient.callApi('/collaborators', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the deleteCollaborators operation.
     * @callback module:api/CollaboratorsApi~deleteCollaboratorsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of Collaborators. This assumes that Users have first been uploaded via a POST request or web console
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.emails The list of user emails to search by
     * @param {module:api/CollaboratorsApi~deleteCollaboratorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponse}
     */

  }, {
    key: "deleteCollaborators",
    value: function deleteCollaborators(opts, callback) {
      opts = opts || {};
      var postBody = null;
      var pathParams = {};
      var queryParams = {
        'emails': this.apiClient.buildCollectionParam(opts['emails'], 'multi')
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ApiResponse["default"];
      return this.apiClient.callApi('/collaborators', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the getAvailableRolesForCollaborators operation.
     * @callback module:api/CollaboratorsApi~getAvailableRolesForCollaboratorsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CollaboratorRolesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of Collaborators. This assumes that Users have first been uploaded via a POST request or web console
     * @param {module:api/CollaboratorsApi~getAvailableRolesForCollaboratorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CollaboratorRolesResponse}
     */

  }, {
    key: "getAvailableRolesForCollaborators",
    value: function getAvailableRolesForCollaborators(callback) {
      var postBody = null;
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _CollaboratorRolesResponse["default"];
      return this.apiClient.callApi('/collaborators/available-roles', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the getCollaborators operation.
     * @callback module:api/CollaboratorsApi~getCollaboratorsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CollaboratorResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of Collaborators. This assumes that Users have first been uploaded via a POST request or web console
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.emails The list of user emails to search by
     * @param {Number} opts.limit Limit the returned total records found
     * @param {Number} opts.skip Skip the returned records found and return the next batch of records
     * @param {module:api/CollaboratorsApi~getCollaboratorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CollaboratorResponse}
     */

  }, {
    key: "getCollaborators",
    value: function getCollaborators(opts, callback) {
      opts = opts || {};
      var postBody = null;
      var pathParams = {};
      var queryParams = {
        'emails': this.apiClient.buildCollectionParam(opts['emails'], 'multi'),
        '_limit': opts['limit'],
        '_skip': opts['skip']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _CollaboratorResponse["default"];
      return this.apiClient.callApi('/collaborators', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the getCollaboratorsByQuery operation.
     * @callback module:api/CollaboratorsApi~getCollaboratorsByQueryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CollaboratorResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * NOT AVAILABLE IN CURRENT RELEASE
     * Retrieve collaborators for the account
     * @param {Object} opts Optional parameters
     * @param {module:model/QueryRequest} opts.body Retrieve collaborators for the account
     * @param {module:api/CollaboratorsApi~getCollaboratorsByQueryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CollaboratorResponse}
     */

  }, {
    key: "getCollaboratorsByQuery",
    value: function getCollaboratorsByQuery(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _CollaboratorResponse["default"];
      return this.apiClient.callApi('/collaborators/query', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the updateCollaborators operation.
     * @callback module:api/CollaboratorsApi~updateCollaboratorsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing Collaborator in the Ziqni system
     * @param {Array.<module:model/UpdateCollaboratorRequest>} body Update a Collaborator in the Ziqni system. * Any Put body Parameters that are excluded in the Request body field will be considered as empty and updated with an empty field
     * @param {module:api/CollaboratorsApi~updateCollaboratorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponse}
     */

  }, {
    key: "updateCollaborators",
    value: function updateCollaborators(body, callback) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateCollaborators");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _ApiResponse["default"];
      return this.apiClient.callApi('/collaborators', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
  }]);

  return CollaboratorsApi;
}();

exports["default"] = CollaboratorsApi;