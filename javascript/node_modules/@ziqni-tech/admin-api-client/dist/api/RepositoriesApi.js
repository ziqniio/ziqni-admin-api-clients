"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

var _ApiResponse = _interopRequireDefault(require("../model/ApiResponse"));

var _CreateRepositoryRequest = _interopRequireDefault(require("../model/CreateRepositoryRequest"));

var _QueryRequest = _interopRequireDefault(require("../model/QueryRequest"));

var _RepositoryResponse = _interopRequireDefault(require("../model/RepositoryResponse"));

var _UpdateRepositoryRequest = _interopRequireDefault(require("../model/UpdateRepositoryRequest"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

/**
* Repositories service.
* @module api/RepositoriesApi
* @version 0.0.5
*/
var RepositoriesApi = /*#__PURE__*/function () {
  /**
  * Constructs a new RepositoriesApi. 
  * @alias module:api/RepositoriesApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function RepositoriesApi(apiClient) {
    _classCallCheck(this, RepositoriesApi);

    this.apiClient = apiClient || _ApiClient["default"].instance;
  }
  /**
   * Callback function to receive the result of the createFileObjectRepository operation.
   * @callback module:api/RepositoriesApi~createFileObjectRepositoryCallback
   * @param {String} error Error message, if any.
   * @param {module:model/ApiResponse} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Create a new file object repository in your Ziqni space
   * @param {Array.<module:model/CreateRepositoryRequest>} body Create a new file object repository in your Ziqni space
   * @param {module:api/RepositoriesApi~createFileObjectRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/ApiResponse}
   */


  _createClass(RepositoriesApi, [{
    key: "createFileObjectRepository",
    value: function createFileObjectRepository(body, callback) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createFileObjectRepository");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _ApiResponse["default"];
      return this.apiClient.callApi('/repositories', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the deleteFileObjectRepositoriesByQuery operation.
     * @callback module:api/RepositoriesApi~deleteFileObjectRepositoriesByQueryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * NOT AVAILABLE IN CURRENT RELEASE
     * Delete repositories nby query. Delete repositories by query and/or unique repository ID's or any other body parameters
     * @param {Object} opts Optional parameters
     * @param {module:model/QueryRequest} opts.body Delete repositories from a Ziqni space by unique repository ID's or any other POST body parameters using the POST method
     * @param {module:api/RepositoriesApi~deleteFileObjectRepositoriesByQueryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponse}
     */

  }, {
    key: "deleteFileObjectRepositoriesByQuery",
    value: function deleteFileObjectRepositoriesByQuery(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _ApiResponse["default"];
      return this.apiClient.callApi('/repositories/delete', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the deleteFileObjectRepositoryById operation.
     * @callback module:api/RepositoriesApi~deleteFileObjectRepositoryByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the file repository for a given identifier specified
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.id The unique identifiers of the resources
     * @param {Boolean} opts.permanent Permanently delete the file object. Default is false
     * @param {module:api/RepositoriesApi~deleteFileObjectRepositoryByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponse}
     */

  }, {
    key: "deleteFileObjectRepositoryById",
    value: function deleteFileObjectRepositoryById(opts, callback) {
      opts = opts || {};
      var postBody = null;
      var pathParams = {};
      var queryParams = {
        'id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        'permanent': opts['permanent']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ApiResponse["default"];
      return this.apiClient.callApi('/repositories', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the getFileObjectRepositoriesByQuery operation.
     * @callback module:api/RepositoriesApi~getFileObjectRepositoriesByQueryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RepositoryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find file object repositories by query
     * @param {Object} opts Optional parameters
     * @param {module:model/QueryRequest} opts.body Retrieve file object repositories from Ziqni by unique repository ID's or any other POST body parameters using the POST method
     * @param {module:api/RepositoriesApi~getFileObjectRepositoriesByQueryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RepositoryResponse}
     */

  }, {
    key: "getFileObjectRepositoriesByQuery",
    value: function getFileObjectRepositoriesByQuery(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _RepositoryResponse["default"];
      return this.apiClient.callApi('/repositories/query', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the getListOfFileObjectRepositories operation.
     * @callback module:api/RepositoriesApi~getListOfFileObjectRepositoriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RepositoryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of file object repositories. This assumes that repositories have first been uploaded via a POST request or web console
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Limit the returned total records found
     * @param {Number} opts.skip Skip the returned records found and return the next batch of records
     * @param {Array.<String>} opts.id The unique identifiers of the resources
     * @param {module:api/RepositoriesApi~getListOfFileObjectRepositoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RepositoryResponse}
     */

  }, {
    key: "getListOfFileObjectRepositories",
    value: function getListOfFileObjectRepositories(opts, callback) {
      opts = opts || {};
      var postBody = null;
      var pathParams = {};
      var queryParams = {
        '_limit': opts['limit'],
        '_skip': opts['skip'],
        'id': this.apiClient.buildCollectionParam(opts['id'], 'multi')
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _RepositoryResponse["default"];
      return this.apiClient.callApi('/repositories', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the updateFileObjectRepository operation.
     * @callback module:api/RepositoriesApi~updateFileObjectRepositoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a file object repository in your Ziqni space.
     * @param {Array.<module:model/UpdateRepositoryRequest>} body Update a file object repository in your Ziqni space.
     * @param {module:api/RepositoriesApi~updateFileObjectRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponse}
     */

  }, {
    key: "updateFileObjectRepository",
    value: function updateFileObjectRepository(body, callback) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateFileObjectRepository");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _ApiResponse["default"];
      return this.apiClient.callApi('/repositories', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
  }]);

  return RepositoriesApi;
}();

exports["default"] = RepositoriesApi;