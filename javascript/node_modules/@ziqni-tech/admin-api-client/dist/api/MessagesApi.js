"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

var _AccountMessageResponse = _interopRequireDefault(require("../model/AccountMessageResponse"));

var _ApiResponse = _interopRequireDefault(require("../model/ApiResponse"));

var _CreateMemberMessageRequest = _interopRequireDefault(require("../model/CreateMemberMessageRequest"));

var _MemberMessageResponse = _interopRequireDefault(require("../model/MemberMessageResponse"));

var _NotificationResponse = _interopRequireDefault(require("../model/NotificationResponse"));

var _QueryRequest = _interopRequireDefault(require("../model/QueryRequest"));

var _TestMessageRequest = _interopRequireDefault(require("../model/TestMessageRequest"));

var _UpdateMemberMessageRequest = _interopRequireDefault(require("../model/UpdateMemberMessageRequest"));

var _UpdateMessageStatusRequest = _interopRequireDefault(require("../model/UpdateMessageStatusRequest"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

/**
* Messages service.
* @module api/MessagesApi
* @version 0.0.5
*/
var MessagesApi = /*#__PURE__*/function () {
  /**
  * Constructs a new MessagesApi. 
  * @alias module:api/MessagesApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function MessagesApi(apiClient) {
    _classCallCheck(this, MessagesApi);

    this.apiClient = apiClient || _ApiClient["default"].instance;
  }
  /**
   * Callback function to receive the result of the createMemberMessages operation.
   * @callback module:api/MessagesApi~createMemberMessagesCallback
   * @param {String} error Error message, if any.
   * @param {module:model/ApiResponse} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Create Member Messages in the Ziqni database
   * @param {Array.<module:model/CreateMemberMessageRequest>} body Create Messages in the Ziqni database
   * @param {module:api/MessagesApi~createMemberMessagesCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/ApiResponse}
   */


  _createClass(MessagesApi, [{
    key: "createMemberMessages",
    value: function createMemberMessages(body, callback) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createMemberMessages");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _ApiResponse["default"];
      return this.apiClient.callApi('/messages/member', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the deleteAccountMessages operation.
     * @callback module:api/MessagesApi~deleteAccountMessagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Account Messages for a given identifier specified
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.id The unique identifiers of the resources
     * @param {module:api/MessagesApi~deleteAccountMessagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponse}
     */

  }, {
    key: "deleteAccountMessages",
    value: function deleteAccountMessages(opts, callback) {
      opts = opts || {};
      var postBody = null;
      var pathParams = {};
      var queryParams = {
        'id': this.apiClient.buildCollectionParam(opts['id'], 'multi')
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ApiResponse["default"];
      return this.apiClient.callApi('/messages/account', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the deleteAccountMessagesByQuery operation.
     * @callback module:api/MessagesApi~deleteAccountMessagesByQueryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * NOT AVAILABLE IN CURRENT RELEASE
     * Delete Account Messages from Ziqni database by unique message ID's or any other POST body parameters using the POST method
     * @param {Object} opts Optional parameters
     * @param {module:model/QueryRequest} opts.body Delete Account Messages from Ziqni database by unique message ID's or any other POST body parameters using the POST method
     * @param {module:api/MessagesApi~deleteAccountMessagesByQueryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponse}
     */

  }, {
    key: "deleteAccountMessagesByQuery",
    value: function deleteAccountMessagesByQuery(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _ApiResponse["default"];
      return this.apiClient.callApi('/messages/account/delete', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the deleteMemberMessages operation.
     * @callback module:api/MessagesApi~deleteMemberMessagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Member Messages for a given identifier specified
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.id The unique identifiers of the resources
     * @param {module:api/MessagesApi~deleteMemberMessagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponse}
     */

  }, {
    key: "deleteMemberMessages",
    value: function deleteMemberMessages(opts, callback) {
      opts = opts || {};
      var postBody = null;
      var pathParams = {};
      var queryParams = {
        'id': this.apiClient.buildCollectionParam(opts['id'], 'multi')
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ApiResponse["default"];
      return this.apiClient.callApi('/messages/member', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the deleteMemberMessagesByQuery operation.
     * @callback module:api/MessagesApi~deleteMemberMessagesByQueryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * NOT AVAILABLE IN CURRENT RELEASE
     * Delete Member Messages from Ziqni database by unique message ID's or any other POST body parameters using the POST method
     * @param {Object} opts Optional parameters
     * @param {module:model/QueryRequest} opts.body Delete Member Messages from Ziqni database by unique message ID's or any other POST body parameters using the POST method
     * @param {module:api/MessagesApi~deleteMemberMessagesByQueryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponse}
     */

  }, {
    key: "deleteMemberMessagesByQuery",
    value: function deleteMemberMessagesByQuery(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _ApiResponse["default"];
      return this.apiClient.callApi('/messages/member/delete', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the deleteNotificationMessagesByQuery operation.
     * @callback module:api/MessagesApi~deleteNotificationMessagesByQueryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * NOT AVAILABLE IN CURRENT RELEASE
     * Delete Notification Messages from Ziqni database by unique message ID's or any other POST body parameters using the POST method
     * @param {Object} opts Optional parameters
     * @param {module:model/QueryRequest} opts.body Delete Notification Messages from Ziqni database by unique message ID's or any other POST body parameters using the POST method
     * @param {module:api/MessagesApi~deleteNotificationMessagesByQueryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponse}
     */

  }, {
    key: "deleteNotificationMessagesByQuery",
    value: function deleteNotificationMessagesByQuery(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _ApiResponse["default"];
      return this.apiClient.callApi('/messages/notification/delete', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the getAccountMessages operation.
     * @callback module:api/MessagesApi~getAccountMessagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountMessageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of Account Messages. This assumes that Messages have first been uploaded via a POST request or web console
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.id The unique identifiers of the resources
     * @param {Number} opts.limit Limit the returned total records found
     * @param {Number} opts.skip Skip the returned records found and return the next batch of records
     * @param {module:api/MessagesApi~getAccountMessagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountMessageResponse}
     */

  }, {
    key: "getAccountMessages",
    value: function getAccountMessages(opts, callback) {
      opts = opts || {};
      var postBody = null;
      var pathParams = {};
      var queryParams = {
        'id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        '_limit': opts['limit'],
        '_skip': opts['skip']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _AccountMessageResponse["default"];
      return this.apiClient.callApi('/messages/account', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the getAccountMessagesByQuery operation.
     * @callback module:api/MessagesApi~getAccountMessagesByQueryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountMessageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Account Messages from Ziqni database by unique message ID's or any other POST body parameters using the POST method
     * @param {Object} opts Optional parameters
     * @param {module:model/QueryRequest} opts.body Retrieve Account Messages from Ziqni database by unique message ID's or any other POST body parameters using the POST method
     * @param {module:api/MessagesApi~getAccountMessagesByQueryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountMessageResponse}
     */

  }, {
    key: "getAccountMessagesByQuery",
    value: function getAccountMessagesByQuery(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _AccountMessageResponse["default"];
      return this.apiClient.callApi('/messages/account/query', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the getMemberMessages operation.
     * @callback module:api/MessagesApi~getMemberMessagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MemberMessageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of Member Messages. This assumes that Messages have first been uploaded via a POST request or web console
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.id The unique identifiers of the resources
     * @param {Number} opts.limit Limit the returned total records found
     * @param {Number} opts.skip Skip the returned records found and return the next batch of records
     * @param {module:api/MessagesApi~getMemberMessagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MemberMessageResponse}
     */

  }, {
    key: "getMemberMessages",
    value: function getMemberMessages(opts, callback) {
      opts = opts || {};
      var postBody = null;
      var pathParams = {};
      var queryParams = {
        'id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        '_limit': opts['limit'],
        '_skip': opts['skip']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _MemberMessageResponse["default"];
      return this.apiClient.callApi('/messages/member', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the getMemberMessagesByQuery operation.
     * @callback module:api/MessagesApi~getMemberMessagesByQueryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MemberMessageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Member Messages from Ziqni database by unique message ID's or any other POST body parameters using the POST method
     * @param {Object} opts Optional parameters
     * @param {module:model/QueryRequest} opts.body Retrieve Member Messages from Ziqni database by unique message ID's or any other POST body parameters using the POST method
     * @param {module:api/MessagesApi~getMemberMessagesByQueryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MemberMessageResponse}
     */

  }, {
    key: "getMemberMessagesByQuery",
    value: function getMemberMessagesByQuery(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _MemberMessageResponse["default"];
      return this.apiClient.callApi('/messages/member/query', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the getNotificationMessages operation.
     * @callback module:api/MessagesApi~getNotificationMessagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NotificationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of Notification Messages. This assumes that Messages have first been uploaded via a POST request or web console
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.id The unique identifiers of the resources
     * @param {Number} opts.limit Limit the returned total records found
     * @param {Number} opts.skip Skip the returned records found and return the next batch of records
     * @param {module:api/MessagesApi~getNotificationMessagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NotificationResponse}
     */

  }, {
    key: "getNotificationMessages",
    value: function getNotificationMessages(opts, callback) {
      opts = opts || {};
      var postBody = null;
      var pathParams = {};
      var queryParams = {
        'id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        '_limit': opts['limit'],
        '_skip': opts['skip']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _NotificationResponse["default"];
      return this.apiClient.callApi('/messages/notification', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the getNotificationMessagesByQuery operation.
     * @callback module:api/MessagesApi~getNotificationMessagesByQueryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NotificationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Notification Messages from Ziqni database by unique message ID's or any other POST body parameters using the POST method
     * @param {Object} opts Optional parameters
     * @param {module:model/QueryRequest} opts.body Retrieve Notification Messages from Ziqni database by unique message ID's or any other POST body parameters using the POST method
     * @param {module:api/MessagesApi~getNotificationMessagesByQueryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NotificationResponse}
     */

  }, {
    key: "getNotificationMessagesByQuery",
    value: function getNotificationMessagesByQuery(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _NotificationResponse["default"];
      return this.apiClient.callApi('/messages/notification/query', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the testAccountMessagesById operation.
     * @callback module:api/MessagesApi~testAccountMessagesByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * NOT AVAILABLE IN CURRENT RELEASE
     * Test Account Messages for a given Message identifier specified
     * @param {String} id Unique identifier of the resource
     * @param {module:model/TestMessageRequest} body Send test Account Messages to individuals by a Message identifier provided
     * @param {module:api/MessagesApi~testAccountMessagesByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponse}
     */

  }, {
    key: "testAccountMessagesById",
    value: function testAccountMessagesById(id, body, callback) {
      var postBody = body; // verify the required parameter 'id' is set

      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling testAccountMessagesById");
      } // verify the required parameter 'body' is set


      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling testAccountMessagesById");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _ApiResponse["default"];
      return this.apiClient.callApi('/messages/account/{id}/test', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the testMemberMessagesById operation.
     * @callback module:api/MessagesApi~testMemberMessagesByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * NOT AVAILABLE IN CURRENT RELEASE
     * Test Member Messages for a given Message identifier specified
     * @param {String} id Unique identifier of the resource
     * @param {module:model/TestMessageRequest} body Send test Member Messages to individuals by a Message identifier provided
     * @param {module:api/MessagesApi~testMemberMessagesByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponse}
     */

  }, {
    key: "testMemberMessagesById",
    value: function testMemberMessagesById(id, body, callback) {
      var postBody = body; // verify the required parameter 'id' is set

      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling testMemberMessagesById");
      } // verify the required parameter 'body' is set


      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling testMemberMessagesById");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _ApiResponse["default"];
      return this.apiClient.callApi('/messages/member/{id}/test', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the testNotificationMessagesById operation.
     * @callback module:api/MessagesApi~testNotificationMessagesByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * NOT AVAILABLE IN CURRENT RELEASE
     * Test Notification Messages for a given Message identifier specified
     * @param {String} id Unique identifier of the resource
     * @param {module:model/TestMessageRequest} body Send test Notification Messages to individuals by a Message identifier provided
     * @param {module:api/MessagesApi~testNotificationMessagesByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponse}
     */

  }, {
    key: "testNotificationMessagesById",
    value: function testNotificationMessagesById(id, body, callback) {
      var postBody = body; // verify the required parameter 'id' is set

      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling testNotificationMessagesById");
      } // verify the required parameter 'body' is set


      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling testNotificationMessagesById");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _ApiResponse["default"];
      return this.apiClient.callApi('/messages/notification/{id}/test', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the updateAccountMessagesStatus operation.
     * @callback module:api/MessagesApi~updateAccountMessagesStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * NOT AVAILABLE IN CURRENT RELEASE
     * Update the Account Message status
     * @param {Array.<module:model/UpdateMessageStatusRequest>} body Update the Account Message status
     * @param {module:api/MessagesApi~updateAccountMessagesStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponse}
     */

  }, {
    key: "updateAccountMessagesStatus",
    value: function updateAccountMessagesStatus(body, callback) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateAccountMessagesStatus");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _ApiResponse["default"];
      return this.apiClient.callApi('/messages/account/state', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the updateMemberMessages operation.
     * @callback module:api/MessagesApi~updateMemberMessagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a Member Message by identifier provided. This assumes that Messages have first been uploaded via a POST request or web console
     * @param {module:model/UpdateMemberMessageRequest} body Update a Member Message by a Message identifier provided
     * @param {module:api/MessagesApi~updateMemberMessagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponse}
     */

  }, {
    key: "updateMemberMessages",
    value: function updateMemberMessages(body, callback) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateMemberMessages");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _ApiResponse["default"];
      return this.apiClient.callApi('/messages/member', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the updateMemberMessagesStatus operation.
     * @callback module:api/MessagesApi~updateMemberMessagesStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * NOT AVAILABLE IN CURRENT RELEASE
     * Update the Member Message status
     * @param {Array.<module:model/UpdateMessageStatusRequest>} body Update the Member Message status
     * @param {module:api/MessagesApi~updateMemberMessagesStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponse}
     */

  }, {
    key: "updateMemberMessagesStatus",
    value: function updateMemberMessagesStatus(body, callback) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateMemberMessagesStatus");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _ApiResponse["default"];
      return this.apiClient.callApi('/messages/member/state', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the updateNotificationMessagesStatus operation.
     * @callback module:api/MessagesApi~updateNotificationMessagesStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * NOT AVAILABLE IN CURRENT RELEASE
     * Update the Notification Message status
     * @param {Array.<module:model/UpdateMessageStatusRequest>} body Update the Notification Message status
     * @param {module:api/MessagesApi~updateNotificationMessagesStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponse}
     */

  }, {
    key: "updateNotificationMessagesStatus",
    value: function updateNotificationMessagesStatus(body, callback) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateNotificationMessagesStatus");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _ApiResponse["default"];
      return this.apiClient.callApi('/messages/notification/state', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
  }]);

  return MessagesApi;
}();

exports["default"] = MessagesApi;