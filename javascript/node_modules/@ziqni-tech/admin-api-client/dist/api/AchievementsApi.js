"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

var _AchievementIssuedResponse = _interopRequireDefault(require("../model/AchievementIssuedResponse"));

var _AchievementLiveStatusRequest = _interopRequireDefault(require("../model/AchievementLiveStatusRequest"));

var _AchievementResponse = _interopRequireDefault(require("../model/AchievementResponse"));

var _ApiResponse = _interopRequireDefault(require("../model/ApiResponse"));

var _CloneAchievementResponse = _interopRequireDefault(require("../model/CloneAchievementResponse"));

var _CreateAchievementRequest = _interopRequireDefault(require("../model/CreateAchievementRequest"));

var _MemberAchievementIssuedResponse = _interopRequireDefault(require("../model/MemberAchievementIssuedResponse"));

var _QueryRequest = _interopRequireDefault(require("../model/QueryRequest"));

var _UpdateAchievementRequest = _interopRequireDefault(require("../model/UpdateAchievementRequest"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

/**
* Achievements service.
* @module api/AchievementsApi
* @version 0.0.26
*/
var AchievementsApi = /*#__PURE__*/function () {
  /**
  * Constructs a new AchievementsApi. 
  * @alias module:api/AchievementsApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function AchievementsApi(apiClient) {
    _classCallCheck(this, AchievementsApi);

    this.apiClient = apiClient || _ApiClient["default"].instance;
  }
  /**
   * Callback function to receive the result of the createAchievements operation.
   * @callback module:api/AchievementsApi~createAchievementsCallback
   * @param {String} error Error message, if any.
   * @param {module:model/ApiResponse} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Create Achievements
   * Create Achievements in the Ziqni database
   * @param {Array.<module:model/CreateAchievementRequest>} body Create Achievements in the Ziqni database
   * @param {module:api/AchievementsApi~createAchievementsCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/ApiResponse}
   */


  _createClass(AchievementsApi, [{
    key: "createAchievements",
    value: function createAchievements(body, callback) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createAchievements");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _ApiResponse["default"];
      return this.apiClient.callApi('/achievements', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the deleteAchievements operation.
     * @callback module:api/AchievementsApi~deleteAchievementsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Achievements
     * Delete Achievements for a given identifier specified
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.id The unique identifiers of the resources
     * @param {module:api/AchievementsApi~deleteAchievementsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponse}
     */

  }, {
    key: "deleteAchievements",
    value: function deleteAchievements(opts, callback) {
      opts = opts || {};
      var postBody = null;
      var pathParams = {};
      var queryParams = {
        'id': this.apiClient.buildCollectionParam(opts['id'], 'multi')
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ApiResponse["default"];
      return this.apiClient.callApi('/achievements', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the deleteAchievementsByQuery operation.
     * @callback module:api/AchievementsApi~deleteAchievementsByQueryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Achievements from Ziqni database by unique Achievements ID's or any other POST body parameters using the POST method
     * @param {Object} opts Optional parameters
     * @param {module:model/QueryRequest} opts.body Delete Achievements from Ziqni database by unique Achievements ID's or any other Post body parameters using the POST method
     * @param {module:api/AchievementsApi~deleteAchievementsByQueryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponse}
     */

  }, {
    key: "deleteAchievementsByQuery",
    value: function deleteAchievementsByQuery(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _ApiResponse["default"];
      return this.apiClient.callApi('/achievements/delete', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the getAchievementToClone operation.
     * @callback module:api/AchievementsApi~getAchievementToCloneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CloneAchievementResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * NOT AVAILABLE IN CURRENT RELEASE
     * Clones an Achievement for the identifier provided
     * @param {String} id Unique identifier of the resource
     * @param {module:api/AchievementsApi~getAchievementToCloneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CloneAchievementResponse}
     */

  }, {
    key: "getAchievementToClone",
    value: function getAchievementToClone(id, callback) {
      var postBody = null; // verify the required parameter 'id' is set

      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAchievementToClone");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _CloneAchievementResponse["default"];
      return this.apiClient.callApi('/achievements/{id}/clone', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the getAchievements operation.
     * @callback module:api/AchievementsApi~getAchievementsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AchievementResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Achievements
     * Returns a list of Achievements. This assumes that achievements have first been uploaded via a POST request or web console
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.id The unique identifiers of the resources
     * @param {Number} opts.limit Limit the returned total records found
     * @param {Number} opts.skip Skip the returned records found and return the next batch of records
     * @param {module:api/AchievementsApi~getAchievementsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AchievementResponse}
     */

  }, {
    key: "getAchievements",
    value: function getAchievements(opts, callback) {
      opts = opts || {};
      var postBody = null;
      var pathParams = {};
      var queryParams = {
        'id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        '_limit': opts['limit'],
        '_skip': opts['skip']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _AchievementResponse["default"];
      return this.apiClient.callApi('/achievements', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the getAchievementsByQuery operation.
     * @callback module:api/AchievementsApi~getAchievementsByQueryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AchievementResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Achievements from Ziqni database by unique Achievements ID's or any other POST body parameters using the POST method
     * @param {Object} opts Optional parameters
     * @param {module:model/QueryRequest} opts.body Retrieve Achievements from Ziqni database by unique Achievements ID's or any other Post body parameters using the POST method
     * @param {module:api/AchievementsApi~getAchievementsByQueryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AchievementResponse}
     */

  }, {
    key: "getAchievementsByQuery",
    value: function getAchievementsByQuery(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _AchievementResponse["default"];
      return this.apiClient.callApi('/achievements/query', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the getAntecendentsForAchievement operation.
     * @callback module:api/AchievementsApi~getAntecendentsForAchievementCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AchievementResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * NOT AVAILABLE IN CURRENT RELEASE
     * Receive a list of Antecedent Achievements for the Achievement identified provided
     * @param {String} id Unique identifier of the resource
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Limit the returned total records found
     * @param {Number} opts.skip Skip the returned records found and return the next batch of records
     * @param {module:api/AchievementsApi~getAntecendentsForAchievementCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AchievementResponse}
     */

  }, {
    key: "getAntecendentsForAchievement",
    value: function getAntecendentsForAchievement(id, opts, callback) {
      opts = opts || {};
      var postBody = null; // verify the required parameter 'id' is set

      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAntecendentsForAchievement");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        '_limit': opts['limit'],
        '_skip': opts['skip']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _AchievementResponse["default"];
      return this.apiClient.callApi('/achievements/{id}/antecedents', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the getDesendentsForAchievement operation.
     * @callback module:api/AchievementsApi~getDesendentsForAchievementCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AchievementResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * NOT AVAILABLE IN CURRENT RELEASE
     * Receive a list of Descendent Achievements for the Achievement identified provided
     * @param {String} id Unique identifier of the resource
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Limit the returned total records found
     * @param {Number} opts.skip Skip the returned records found and return the next batch of records
     * @param {module:api/AchievementsApi~getDesendentsForAchievementCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AchievementResponse}
     */

  }, {
    key: "getDesendentsForAchievement",
    value: function getDesendentsForAchievement(id, opts, callback) {
      opts = opts || {};
      var postBody = null; // verify the required parameter 'id' is set

      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDesendentsForAchievement");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        '_limit': opts['limit'],
        '_skip': opts['skip']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _AchievementResponse["default"];
      return this.apiClient.callApi('/achievements/{id}/descendents', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the getIssuedAchievementsCountById operation.
     * @callback module:api/AchievementsApi~getIssuedAchievementsCountByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AchievementIssuedResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * NOT AVAILABLE IN CURRENT RELEASE
     * Receive a count of Issued Achievements by identifier provided
     * @param {String} id Unique identifier of the resource
     * @param {module:api/AchievementsApi~getIssuedAchievementsCountByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AchievementIssuedResponse}
     */

  }, {
    key: "getIssuedAchievementsCountById",
    value: function getIssuedAchievementsCountById(id, callback) {
      var postBody = null; // verify the required parameter 'id' is set

      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getIssuedAchievementsCountById");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _AchievementIssuedResponse["default"];
      return this.apiClient.callApi('/achievements/{id}/issued', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the getMembersAchievementsDetails operation.
     * @callback module:api/AchievementsApi~getMembersAchievementsDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MemberAchievementIssuedResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * NOT AVAILABLE IN CURRENT RELEASE
     * Receive a list of members that had an Achievement issued for the Achievement identified provided
     * @param {String} id Unique identifier of the resource
     * @param {Object} opts Optional parameters
     * @param {String} opts.memberId Id of a member
     * @param {Number} opts.limit Limit the returned total records found
     * @param {Number} opts.skip Skip the returned records found and return the next batch of records
     * @param {module:api/AchievementsApi~getMembersAchievementsDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MemberAchievementIssuedResponse}
     */

  }, {
    key: "getMembersAchievementsDetails",
    value: function getMembersAchievementsDetails(id, opts, callback) {
      opts = opts || {};
      var postBody = null; // verify the required parameter 'id' is set

      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getMembersAchievementsDetails");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        'memberId': opts['memberId'],
        '_limit': opts['limit'],
        '_skip': opts['skip']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _MemberAchievementIssuedResponse["default"];
      return this.apiClient.callApi('/achievements/{id}/members', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the updateAchievements operation.
     * @callback module:api/AchievementsApi~updateAchievementsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Achievements
     * Update existing Achievements in the Ziqni database
     * @param {Array.<module:model/UpdateAchievementRequest>} body Update Achievements in the Ziqni database. * An Achievement Id must exist in the Ziqni database for update
     * @param {module:api/AchievementsApi~updateAchievementsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponse}
     */

  }, {
    key: "updateAchievements",
    value: function updateAchievements(body, callback) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateAchievements");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _ApiResponse["default"];
      return this.apiClient.callApi('/achievements', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the updateAchievementsLiveStatus operation.
     * @callback module:api/AchievementsApi~updateAchievementsLiveStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Manage the state of achievement - Draft, Live, Archived
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/AchievementLiveStatusRequest>} opts.body Updates the state of the Achievement
     * @param {module:api/AchievementsApi~updateAchievementsLiveStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponse}
     */

  }, {
    key: "updateAchievementsLiveStatus",
    value: function updateAchievementsLiveStatus(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _ApiResponse["default"];
      return this.apiClient.callApi('/achievements/state', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
  }]);

  return AchievementsApi;
}();

exports["default"] = AchievementsApi;