"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

var _ApiResponse = _interopRequireDefault(require("../model/ApiResponse"));

var _CreateFileObjectRequest = _interopRequireDefault(require("../model/CreateFileObjectRequest"));

var _FileObjectsResponse = _interopRequireDefault(require("../model/FileObjectsResponse"));

var _QueryRequest = _interopRequireDefault(require("../model/QueryRequest"));

var _UpdateFileObjectRequest = _interopRequireDefault(require("../model/UpdateFileObjectRequest"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

/**
* FileObjects service.
* @module api/FileObjectsApi
* @version 0.0.26
*/
var FileObjectsApi = /*#__PURE__*/function () {
  /**
  * Constructs a new FileObjectsApi. 
  * @alias module:api/FileObjectsApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function FileObjectsApi(apiClient) {
    _classCallCheck(this, FileObjectsApi);

    this.apiClient = apiClient || _ApiClient["default"].instance;
  }
  /**
   * Callback function to receive the result of the copyFileObjects operation.
   * @callback module:api/FileObjectsApi~copyFileObjectsCallback
   * @param {String} error Error message, if any.
   * @param {module:model/ApiResponse} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * NOT AVAILABLE IN CURRENT RELEASE
   * Copy an existing file object
   * @param {module:model/UpdateFileObjectRequest} body Copy file objects inside a repository and dumplicate in another folder or repository.
   * @param {Object} opts Optional parameters
   * @param {Array.<String>} opts.id The unique identifiers of the resources
   * @param {module:api/FileObjectsApi~copyFileObjectsCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/ApiResponse}
   */


  _createClass(FileObjectsApi, [{
    key: "copyFileObjects",
    value: function copyFileObjects(body, opts, callback) {
      opts = opts || {};
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling copyFileObjects");
      }

      var pathParams = {};
      var queryParams = {
        'id': this.apiClient.buildCollectionParam(opts['id'], 'multi')
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _ApiResponse["default"];
      return this.apiClient.callApi('/file-objects/copy', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the createFileObjects operation.
     * @callback module:api/FileObjectsApi~createFileObjectsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/CreateFileObjectRequest} body Create a new file object repository in your Ziqni space
     * @param {module:api/FileObjectsApi~createFileObjectsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponse}
     */

  }, {
    key: "createFileObjects",
    value: function createFileObjects(body, callback) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createFileObjects");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _ApiResponse["default"];
      return this.apiClient.callApi('/file-objects', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the deleteFileObjects operation.
     * @callback module:api/FileObjectsApi~deleteFileObjectsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.id The unique identifiers of the resources
     * @param {Boolean} opts.permanent Permanently delete the file object. Default is false
     * @param {module:api/FileObjectsApi~deleteFileObjectsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponse}
     */

  }, {
    key: "deleteFileObjects",
    value: function deleteFileObjects(opts, callback) {
      opts = opts || {};
      var postBody = null;
      var pathParams = {};
      var queryParams = {
        'id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        'permanent': opts['permanent']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ApiResponse["default"];
      return this.apiClient.callApi('/file-objects', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the deleteFileObjectsByQuery operation.
     * @callback module:api/FileObjectsApi~deleteFileObjectsByQueryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * NOT AVAILABLE IN CURRENT RELEASE
     * Delete file objects by query
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.id The unique identifiers of the resources
     * @param {module:model/QueryRequest} opts.body Delete file objects inside a repository from Ziqni by unique file by unique object ID's or any other POST body parameters using the POST method
     * @param {module:api/FileObjectsApi~deleteFileObjectsByQueryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponse}
     */

  }, {
    key: "deleteFileObjectsByQuery",
    value: function deleteFileObjectsByQuery(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];
      var pathParams = {};
      var queryParams = {
        'id': this.apiClient.buildCollectionParam(opts['id'], 'multi')
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _ApiResponse["default"];
      return this.apiClient.callApi('/file-objects/delete', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the downloadFileObjects operation.
     * @callback module:api/FileObjectsApi~downloadFileObjectsCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * NOT AVAILABLE IN CURRENT RELEASE
     * Download file objects from your Ziqni space
     * @param {Object} opts Optional parameters
     * @param {String} opts.path The canonical path of the file to download
     * @param {module:api/FileObjectsApi~downloadFileObjectsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */

  }, {
    key: "downloadFileObjects",
    value: function downloadFileObjects(opts, callback) {
      opts = opts || {};
      var postBody = null;
      var pathParams = {};
      var queryParams = {
        'path': opts['path']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['text/xml', 'application/json'];
      var returnType = File;
      return this.apiClient.callApi('/file-objects/download', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the getFileObjects operation.
     * @callback module:api/FileObjectsApi~getFileObjectsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FileObjectsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of file objects
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Limit the returned total records found
     * @param {Number} opts.skip Skip the returned records found and return the next batch of records
     * @param {Array.<String>} opts.id The unique identifiers of the resources
     * @param {String} opts.download 
     * @param {module:api/FileObjectsApi~getFileObjectsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FileObjectsResponse}
     */

  }, {
    key: "getFileObjects",
    value: function getFileObjects(opts, callback) {
      opts = opts || {};
      var postBody = null;
      var pathParams = {};
      var queryParams = {
        '_limit': opts['limit'],
        '_skip': opts['skip'],
        'id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        'download': opts['download']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _FileObjectsResponse["default"];
      return this.apiClient.callApi('/file-objects', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the getFileObjectsByQuery operation.
     * @callback module:api/FileObjectsApi~getFileObjectsByQueryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FileObjectsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve file objects by query
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.id The unique identifiers of the resources
     * @param {module:model/QueryRequest} opts.body Retrieve file objects inside a repository from Ziqni by unique file object ID's or any other POST body parameters using the POST method
     * @param {module:api/FileObjectsApi~getFileObjectsByQueryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FileObjectsResponse}
     */

  }, {
    key: "getFileObjectsByQuery",
    value: function getFileObjectsByQuery(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];
      var pathParams = {};
      var queryParams = {
        'id': this.apiClient.buildCollectionParam(opts['id'], 'multi')
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _FileObjectsResponse["default"];
      return this.apiClient.callApi('/file-objects/query', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the saveTemplates operation.
     * @callback module:api/FileObjectsApi~saveTemplatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * NOT AVAILABLE IN CURRENT RELEASE
     * Create or update file objects and binaries in your Ziqni space
     * @param {Object} opts Optional parameters
     * @param {String} opts.parentFolderPath The folder to save these file in.
     * @param {String} opts.repositoryId 
     * @param {String} opts.templateToSave 
     * @param {String} opts.templateName 
     * @param {String} opts.tags 
     * @param {module:api/FileObjectsApi~saveTemplatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponse}
     */

  }, {
    key: "saveTemplates",
    value: function saveTemplates(opts, callback) {
      opts = opts || {};
      var postBody = null;
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {
        'parentFolderPath': opts['parentFolderPath'],
        'repositoryId': opts['repositoryId'],
        'templateToSave': opts['templateToSave'],
        'templateName': opts['templateName'],
        'tags': opts['tags']
      };
      var authNames = ['OAuth2'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = _ApiResponse["default"];
      return this.apiClient.callApi('/file-objects/save-template', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the updateFileObjects operation.
     * @callback module:api/FileObjectsApi~updateFileObjectsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Array.<module:model/UpdateFileObjectRequest>} body Update a file object in your Ziqni space.
     * @param {module:api/FileObjectsApi~updateFileObjectsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponse}
     */

  }, {
    key: "updateFileObjects",
    value: function updateFileObjects(body, callback) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateFileObjects");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _ApiResponse["default"];
      return this.apiClient.callApi('/file-objects', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the uploadFileObjects operation.
     * @callback module:api/FileObjectsApi~uploadFileObjectsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * NOT AVAILABLE IN CURRENT RELEASE
     * Create or update file objects and binaries in your Ziqni space
     * @param {Object} opts Optional parameters
     * @param {String} opts.parentFolderPath The folder to save these file in.
     * @param {Array.<File>} opts.files The files to upload
     * @param {String} opts.repositoryId 
     * @param {String} opts.tags 
     * @param {module:api/FileObjectsApi~uploadFileObjectsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponse}
     */

  }, {
    key: "uploadFileObjects",
    value: function uploadFileObjects(opts, callback) {
      opts = opts || {};
      var postBody = null;
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {
        'parentFolderPath': opts['parentFolderPath'],
        'files': this.apiClient.buildCollectionParam(opts['files'], 'passthrough'),
        'repositoryId': opts['repositoryId'],
        'tags': opts['tags']
      };
      var authNames = ['OAuth2'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = _ApiResponse["default"];
      return this.apiClient.callApi('/file-objects/upload', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
  }]);

  return FileObjectsApi;
}();

exports["default"] = FileObjectsApi;