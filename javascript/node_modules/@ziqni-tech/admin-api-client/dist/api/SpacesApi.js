"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

var _ApiResponse = _interopRequireDefault(require("../model/ApiResponse"));

var _CreateSpaceRequest = _interopRequireDefault(require("../model/CreateSpaceRequest"));

var _SpaceResponse = _interopRequireDefault(require("../model/SpaceResponse"));

var _UpdateSpaceRequest = _interopRequireDefault(require("../model/UpdateSpaceRequest"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

/**
* Spaces service.
* @module api/SpacesApi
* @version 0.0.26
*/
var SpacesApi = /*#__PURE__*/function () {
  /**
  * Constructs a new SpacesApi. 
  * @alias module:api/SpacesApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function SpacesApi(apiClient) {
    _classCallCheck(this, SpacesApi);

    this.apiClient = apiClient || _ApiClient["default"].instance;
  }
  /**
   * Callback function to receive the result of the createSpace operation.
   * @callback module:api/SpacesApi~createSpaceCallback
   * @param {String} error Error message, if any.
   * @param {module:model/ApiResponse} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Create a new Space for the user in the Ziqni
   * @param {Array.<module:model/CreateSpaceRequest>} body 
   * @param {module:api/SpacesApi~createSpaceCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/ApiResponse}
   */


  _createClass(SpacesApi, [{
    key: "createSpace",
    value: function createSpace(body, callback) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createSpace");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _ApiResponse["default"];
      return this.apiClient.callApi('/spaces', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the deleteSpaces operation.
     * @callback module:api/SpacesApi~deleteSpacesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * NOT AVAILABLE IN CURRENT RELEASE
     * Delete the Space for the given Space Name provided
     * @param {String} spaceName This is the space name which will be deleted
     * @param {module:api/SpacesApi~deleteSpacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponse}
     */

  }, {
    key: "deleteSpaces",
    value: function deleteSpaces(spaceName, callback) {
      var postBody = null; // verify the required parameter 'spaceName' is set

      if (spaceName === undefined || spaceName === null) {
        throw new Error("Missing the required parameter 'spaceName' when calling deleteSpaces");
      }

      var pathParams = {
        'spaceName': spaceName
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ApiResponse["default"];
      return this.apiClient.callApi('/spaces/{spaceName}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the getSpaceInfromation operation.
     * @callback module:api/SpacesApi~getSpaceInfromationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpaceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of Spaces for the current session
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Limit the returned total records found
     * @param {Number} opts.skip Skip the returned records found and return the next batch of records
     * @param {module:api/SpacesApi~getSpaceInfromationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpaceResponse}
     */

  }, {
    key: "getSpaceInfromation",
    value: function getSpaceInfromation(opts, callback) {
      opts = opts || {};
      var postBody = null;
      var pathParams = {};
      var queryParams = {
        '_limit': opts['limit'],
        '_skip': opts['skip']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _SpaceResponse["default"];
      return this.apiClient.callApi('/spaces', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the getSpacesByName operation.
     * @callback module:api/SpacesApi~getSpacesByNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpaceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a list of sub-spaces for the given Space Name provided
     * @param {String} spaceName This is the space name which is linked to the account
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Limit the returned total records found
     * @param {Number} opts.skip Skip the returned records found and return the next batch of records
     * @param {module:api/SpacesApi~getSpacesByNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpaceResponse}
     */

  }, {
    key: "getSpacesByName",
    value: function getSpacesByName(spaceName, opts, callback) {
      opts = opts || {};
      var postBody = null; // verify the required parameter 'spaceName' is set

      if (spaceName === undefined || spaceName === null) {
        throw new Error("Missing the required parameter 'spaceName' when calling getSpacesByName");
      }

      var pathParams = {
        'spaceName': spaceName
      };
      var queryParams = {
        '_limit': opts['limit'],
        '_skip': opts['skip']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _SpaceResponse["default"];
      return this.apiClient.callApi('/spaces/{spaceName}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the updateSpace operation.
     * @callback module:api/SpacesApi~updateSpaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a  Space for the user in the Ziqni
     * @param {module:model/UpdateSpaceRequest} body Create a Space for the user in the Ziqni
     * @param {module:api/SpacesApi~updateSpaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponse}
     */

  }, {
    key: "updateSpace",
    value: function updateSpace(body, callback) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateSpace");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _ApiResponse["default"];
      return this.apiClient.callApi('/spaces', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
  }]);

  return SpacesApi;
}();

exports["default"] = SpacesApi;