"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

var _AchievementReducedResponse = _interopRequireDefault(require("../model/AchievementReducedResponse"));

var _ApiResponse = _interopRequireDefault(require("../model/ApiResponse"));

var _CompetitionReducedResponse = _interopRequireDefault(require("../model/CompetitionReducedResponse"));

var _ContestReducedResponse = _interopRequireDefault(require("../model/ContestReducedResponse"));

var _CreateProductRequest = _interopRequireDefault(require("../model/CreateProductRequest"));

var _ProductResponse = _interopRequireDefault(require("../model/ProductResponse"));

var _QueryRequest = _interopRequireDefault(require("../model/QueryRequest"));

var _UpdateProductRequest = _interopRequireDefault(require("../model/UpdateProductRequest"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

/**
* Products service.
* @module api/ProductsApi
* @version 0.0.26
*/
var ProductsApi = /*#__PURE__*/function () {
  /**
  * Constructs a new ProductsApi. 
  * @alias module:api/ProductsApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function ProductsApi(apiClient) {
    _classCallCheck(this, ProductsApi);

    this.apiClient = apiClient || _ApiClient["default"].instance;
  }
  /**
   * Callback function to receive the result of the createProducts operation.
   * @callback module:api/ProductsApi~createProductsCallback
   * @param {String} error Error message, if any.
   * @param {module:model/ApiResponse} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Create products
   * Create new Products in the Ziqni database
   * @param {Array.<module:model/CreateProductRequest>} body Create Products in the Ziqni database. An array can contain a maximum of 10,000 products in one request
   * @param {module:api/ProductsApi~createProductsCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/ApiResponse}
   */


  _createClass(ProductsApi, [{
    key: "createProducts",
    value: function createProducts(body, callback) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createProducts");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = ['application/json', 'file/csv'];
      var accepts = ['application/json'];
      var returnType = _ApiResponse["default"];
      return this.apiClient.callApi('/products', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the deleteProducts operation.
     * @callback module:api/ProductsApi~deleteProductsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete products
     * Delete Products for a given identifier specified
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.id The unique identifiers of the resources
     * @param {module:api/ProductsApi~deleteProductsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponse}
     */

  }, {
    key: "deleteProducts",
    value: function deleteProducts(opts, callback) {
      opts = opts || {};
      var postBody = null;
      var pathParams = {};
      var queryParams = {
        'id': this.apiClient.buildCollectionParam(opts['id'], 'multi')
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ApiResponse["default"];
      return this.apiClient.callApi('/products', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the deleteProductsByQuery operation.
     * @callback module:api/ProductsApi~deleteProductsByQueryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete products by query
     * Delete Products from Ziqni database by unique Product ID's or any other POST body parameters using the POST method
     * @param {Object} opts Optional parameters
     * @param {module:model/QueryRequest} opts.body Delete Products from Ziqni database by unique Product ID's or any other POST body parameters using the POST method
     * @param {module:api/ProductsApi~deleteProductsByQueryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponse}
     */

  }, {
    key: "deleteProductsByQuery",
    value: function deleteProductsByQuery(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _ApiResponse["default"];
      return this.apiClient.callApi('/products/delete', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the getAchievementsForProducts operation.
     * @callback module:api/ProductsApi~getAchievementsForProductsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AchievementReducedResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * NOT AVAILABLE IN CURRENT RELEASE
     * Returns a list of Achievements for the Product id provided
     * @param {String} id Unique identifier of the resource
     * @param {Object} opts Optional parameters
     * @param {String} opts.achievementId Id of an Achievement
     * @param {Number} opts.limit Limit the returned total records found
     * @param {Number} opts.skip Skip the returned records found and return the next batch of records
     * @param {module:api/ProductsApi~getAchievementsForProductsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AchievementReducedResponse}
     */

  }, {
    key: "getAchievementsForProducts",
    value: function getAchievementsForProducts(id, opts, callback) {
      opts = opts || {};
      var postBody = null; // verify the required parameter 'id' is set

      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAchievementsForProducts");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        'achievementId': opts['achievementId'],
        '_limit': opts['limit'],
        '_skip': opts['skip']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _AchievementReducedResponse["default"];
      return this.apiClient.callApi('/products/{id}/achievements', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the getCompetitionsForProducts operation.
     * @callback module:api/ProductsApi~getCompetitionsForProductsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CompetitionReducedResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * NOT AVAILABLE IN CURRENT RELEASE
     * Returns a list of Competitions for the Product id provided
     * @param {String} id Unique identifier of the resource
     * @param {Object} opts Optional parameters
     * @param {String} opts.competitionId Id of a Competition
     * @param {Number} opts.limit Limit the returned total records found
     * @param {Number} opts.skip Skip the returned records found and return the next batch of records
     * @param {module:api/ProductsApi~getCompetitionsForProductsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CompetitionReducedResponse}
     */

  }, {
    key: "getCompetitionsForProducts",
    value: function getCompetitionsForProducts(id, opts, callback) {
      opts = opts || {};
      var postBody = null; // verify the required parameter 'id' is set

      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCompetitionsForProducts");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        'competitionId': opts['competitionId'],
        '_limit': opts['limit'],
        '_skip': opts['skip']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _CompetitionReducedResponse["default"];
      return this.apiClient.callApi('/products/{id}/competitions', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the getContestsForProducts operation.
     * @callback module:api/ProductsApi~getContestsForProductsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContestReducedResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * NOT AVAILABLE IN CURRENT RELEASE
     * Returns a list of Contests for the Product id provided
     * @param {String} id Unique identifier of the resource
     * @param {Object} opts Optional parameters
     * @param {String} opts.contestId Id of a Contest
     * @param {Number} opts.limit Limit the returned total records found
     * @param {Number} opts.skip Skip the returned records found and return the next batch of records
     * @param {module:api/ProductsApi~getContestsForProductsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContestReducedResponse}
     */

  }, {
    key: "getContestsForProducts",
    value: function getContestsForProducts(id, opts, callback) {
      opts = opts || {};
      var postBody = null; // verify the required parameter 'id' is set

      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getContestsForProducts");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        'contestId': opts['contestId'],
        '_limit': opts['limit'],
        '_skip': opts['skip']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ContestReducedResponse["default"];
      return this.apiClient.callApi('/products/{id}/contests', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the getProducts operation.
     * @callback module:api/ProductsApi~getProductsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get products
     * Returns a list of Products. This assumes that products have first been uploaded via a POST request or web console
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.id The unique identifiers of the resources
     * @param {Number} opts.limit Limit the returned total records found
     * @param {Number} opts.skip Skip the returned records found and return the next batch of records
     * @param {module:api/ProductsApi~getProductsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductResponse}
     */

  }, {
    key: "getProducts",
    value: function getProducts(opts, callback) {
      opts = opts || {};
      var postBody = null;
      var pathParams = {};
      var queryParams = {
        'id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        '_limit': opts['limit'],
        '_skip': opts['skip']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ProductResponse["default"];
      return this.apiClient.callApi('/products', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the getProductsByQuery operation.
     * @callback module:api/ProductsApi~getProductsByQueryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get products by query
     * Retrieve Products from Ziqni database by unique Product ID's or any other POST body parameters using the POST method
     * @param {Object} opts Optional parameters
     * @param {module:model/QueryRequest} opts.body Retrieve Products from Ziqni database by unique Product ID's or any other POST body parameters using the POST method
     * @param {module:api/ProductsApi~getProductsByQueryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductResponse}
     */

  }, {
    key: "getProductsByQuery",
    value: function getProductsByQuery(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _ProductResponse["default"];
      return this.apiClient.callApi('/products/query', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the getProductsByRefId operation.
     * @callback module:api/ProductsApi~getProductsByRefIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get products by reference ids
     * Returns a list of Products. This assumes that products have first been uploaded via a POST request or web console
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.refIds The reference ids  of the resources
     * @param {Number} opts.limit Limit the returned total records found
     * @param {Number} opts.skip Skip the returned records found and return the next batch of records
     * @param {module:api/ProductsApi~getProductsByRefIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductResponse}
     */

  }, {
    key: "getProductsByRefId",
    value: function getProductsByRefId(opts, callback) {
      opts = opts || {};
      var postBody = null;
      var pathParams = {};
      var queryParams = {
        'refIds': this.apiClient.buildCollectionParam(opts['refIds'], 'multi'),
        '_limit': opts['limit'],
        '_skip': opts['skip']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ProductResponse["default"];
      return this.apiClient.callApi('/products/find-by-ref-identifiers/', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the updateProducts operation.
     * @callback module:api/ProductsApi~updateProductsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update products
     * Update existing Products in the Ziqni database
     * @param {Array.<module:model/UpdateProductRequest>} body Update a Product or multiple Products in the Ziqni database. * Product Ref Id can not be changed after creation * A products Id must exist in the Ziqni database to update the product
     * @param {module:api/ProductsApi~updateProductsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponse}
     */

  }, {
    key: "updateProducts",
    value: function updateProducts(body, callback) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateProducts");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = ['application/json', 'file/csv'];
      var accepts = ['application/json'];
      var returnType = _ApiResponse["default"];
      return this.apiClient.callApi('/products', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
  }]);

  return ProductsApi;
}();

exports["default"] = ProductsApi;