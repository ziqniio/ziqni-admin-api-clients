"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

var _ApiKeyResponse = _interopRequireDefault(require("../model/ApiKeyResponse"));

var _ApiResponse = _interopRequireDefault(require("../model/ApiResponse"));

var _CreateApiKeyRequest = _interopRequireDefault(require("../model/CreateApiKeyRequest"));

var _QueryRequest = _interopRequireDefault(require("../model/QueryRequest"));

var _UpdateApiKeyRequest = _interopRequireDefault(require("../model/UpdateApiKeyRequest"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

/**
* ApiKeys service.
* @module api/ApiKeysApi
* @version 0.0.26
*/
var ApiKeysApi = /*#__PURE__*/function () {
  /**
  * Constructs a new ApiKeysApi. 
  * @alias module:api/ApiKeysApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function ApiKeysApi(apiClient) {
    _classCallCheck(this, ApiKeysApi);

    this.apiClient = apiClient || _ApiClient["default"].instance;
  }
  /**
   * Callback function to receive the result of the createApiKeys operation.
   * @callback module:api/ApiKeysApi~createApiKeysCallback
   * @param {String} error Error message, if any.
   * @param {module:model/ApiResponse} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Delete api keys
   * Create a new Api key in the Ziqni system
   * @param {module:model/CreateApiKeyRequest} body Create an Api key in the Ziqni system
   * @param {module:api/ApiKeysApi~createApiKeysCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/ApiResponse}
   */


  _createClass(ApiKeysApi, [{
    key: "createApiKeys",
    value: function createApiKeys(body, callback) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createApiKeys");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _ApiResponse["default"];
      return this.apiClient.callApi('/api-keys', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the deleteApiKeys operation.
     * @callback module:api/ApiKeysApi~deleteApiKeysCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete api keys
     * Delete Api keys for a given identifier specified
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.id The unique identifiers of the resources
     * @param {module:api/ApiKeysApi~deleteApiKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponse}
     */

  }, {
    key: "deleteApiKeys",
    value: function deleteApiKeys(opts, callback) {
      opts = opts || {};
      var postBody = null;
      var pathParams = {};
      var queryParams = {
        'id': this.apiClient.buildCollectionParam(opts['id'], 'multi')
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ApiResponse["default"];
      return this.apiClient.callApi('/api-keys', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the deleteApiKeysById operation.
     * @callback module:api/ApiKeysApi~deleteApiKeysByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete api keys by id
     * Delete the Api key for a given identifier specified
     * @param {String} id Unique identifier of the resource
     * @param {module:api/ApiKeysApi~deleteApiKeysByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponse}
     */

  }, {
    key: "deleteApiKeysById",
    value: function deleteApiKeysById(id, callback) {
      var postBody = null; // verify the required parameter 'id' is set

      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteApiKeysById");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ApiResponse["default"];
      return this.apiClient.callApi('/api-keys/{id}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the deleteApiKeysByQuery operation.
     * @callback module:api/ApiKeysApi~deleteApiKeysByQueryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete api keys by query
     * Delete an Api key or a list of Api keys from Ziqni by query
     * @param {Object} opts Optional parameters
     * @param {module:model/QueryRequest} opts.body Delete an Api key or a list of Api keys from Ziqni by unique Api key ID's or any other POST body parameters using the POST method
     * @param {module:api/ApiKeysApi~deleteApiKeysByQueryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponse}
     */

  }, {
    key: "deleteApiKeysByQuery",
    value: function deleteApiKeysByQuery(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _ApiResponse["default"];
      return this.apiClient.callApi('/api-keys/delete', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the getApiKeys operation.
     * @callback module:api/ApiKeysApi~getApiKeysCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiKeyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get api keys
     * Returns a list of Api keys. This assumes that api keys have first been created via a POST request or web console
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.id The unique identifiers of the resources
     * @param {Number} opts.limit Limit the returned total records found
     * @param {Number} opts.skip Skip the returned records found and return the next batch of records
     * @param {module:api/ApiKeysApi~getApiKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiKeyResponse}
     */

  }, {
    key: "getApiKeys",
    value: function getApiKeys(opts, callback) {
      opts = opts || {};
      var postBody = null;
      var pathParams = {};
      var queryParams = {
        'id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        '_limit': opts['limit'],
        '_skip': opts['skip']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ApiKeyResponse["default"];
      return this.apiClient.callApi('/api-keys', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the getApiKeysById operation.
     * @callback module:api/ApiKeysApi~getApiKeysByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiKeyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get api keys by id
     * Returns an Api key by identifier provided. This assumes that api keys have first been created via a POST request or web console
     * @param {String} id Unique identifier of the resource
     * @param {module:api/ApiKeysApi~getApiKeysByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiKeyResponse}
     */

  }, {
    key: "getApiKeysById",
    value: function getApiKeysById(id, callback) {
      var postBody = null; // verify the required parameter 'id' is set

      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getApiKeysById");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ApiKeyResponse["default"];
      return this.apiClient.callApi('/api-keys/{id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the getApiKeysByQuery operation.
     * @callback module:api/ApiKeysApi~getApiKeysByQueryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiKeyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get api keys by query
     * Retrieve an Api key or a list of Api keys by query
     * @param {Object} opts Optional parameters
     * @param {module:model/QueryRequest} opts.body Retrieve an Api key or a list of Api keys from Ziqni by unique Api key ID's or any other POST body parameters using the POST method
     * @param {module:api/ApiKeysApi~getApiKeysByQueryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiKeyResponse}
     */

  }, {
    key: "getApiKeysByQuery",
    value: function getApiKeysByQuery(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _ApiKeyResponse["default"];
      return this.apiClient.callApi('/api-keys/query', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the updateApiKeys operation.
     * @callback module:api/ApiKeysApi~updateApiKeysCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update api keys
     * Update an existing Api key in the Ziqni system
     * @param {module:model/UpdateApiKeyRequest} body Update an Api key in the Ziqni system. * Any Put body Parameters that are excluded in the Request body field will be considered as empty and updated with an empty field
     * @param {module:api/ApiKeysApi~updateApiKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponse}
     */

  }, {
    key: "updateApiKeys",
    value: function updateApiKeys(body, callback) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateApiKeys");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _ApiResponse["default"];
      return this.apiClient.callApi('/api-keys', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
  }]);

  return ApiKeysApi;
}();

exports["default"] = ApiKeysApi;